// runtime can't be in strict mode because a global variable is assign and maybe created.
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["react-refresh"],{

/***/ "./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/helpers.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/helpers.js ***!
  \********************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\n/**\n * MIT License\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n */\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n// This file is copied from the Metro JavaScript bundler, with minor tweaks for\n// webpack 4 compatibility.\n//\n// https://github.com/facebook/metro/blob/d6b9685c730d0d63577db40f41369157f28dfa3a/packages/metro/src/lib/polyfills/require.js\nvar runtime_1 = __importDefault(__webpack_require__(/*! next/dist/compiled/react-refresh/runtime */ \"./node_modules/next/dist/compiled/react-refresh/runtime.js\"));\nfunction isSafeExport(key) {\n  return key === '__esModule' || key === '__N_SSG' || key === '__N_SSP' ||\n  // TODO: remove this key from page config instead of allow listing it\n  key === 'config';\n}\nfunction registerExportsForReactRefresh(moduleExports, moduleID) {\n  runtime_1[\"default\"].register(moduleExports, moduleID + ' %exports%');\n  if (moduleExports == null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over exports.\n    // (This is important for legacy environments.)\n    return;\n  }\n  for (var key in moduleExports) {\n    if (isSafeExport(key)) {\n      continue;\n    }\n    try {\n      var exportValue = moduleExports[key];\n    } catch (_a) {\n      // This might fail due to circular dependencies\n      continue;\n    }\n    var typeID = moduleID + ' %exports% ' + key;\n    runtime_1[\"default\"].register(exportValue, typeID);\n  }\n}\nfunction getRefreshBoundarySignature(moduleExports) {\n  var signature = [];\n  signature.push(runtime_1[\"default\"].getFamilyByType(moduleExports));\n  if (moduleExports == null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over exports.\n    // (This is important for legacy environments.)\n    return signature;\n  }\n  for (var key in moduleExports) {\n    if (isSafeExport(key)) {\n      continue;\n    }\n    try {\n      var exportValue = moduleExports[key];\n    } catch (_a) {\n      // This might fail due to circular dependencies\n      continue;\n    }\n    signature.push(key);\n    signature.push(runtime_1[\"default\"].getFamilyByType(exportValue));\n  }\n  return signature;\n}\nfunction isReactRefreshBoundary(moduleExports) {\n  if (runtime_1[\"default\"].isLikelyComponentType(moduleExports)) {\n    return true;\n  }\n  if (moduleExports == null || typeof moduleExports !== 'object') {\n    // Exit if we can't iterate over exports.\n    return false;\n  }\n  var hasExports = false;\n  var areAllExportsComponents = true;\n  for (var key in moduleExports) {\n    hasExports = true;\n    if (isSafeExport(key)) {\n      continue;\n    }\n    try {\n      var exportValue = moduleExports[key];\n    } catch (_a) {\n      // This might fail due to circular dependencies\n      return false;\n    }\n    if (!runtime_1[\"default\"].isLikelyComponentType(exportValue)) {\n      areAllExportsComponents = false;\n    }\n  }\n  return hasExports && areAllExportsComponents;\n}\nfunction shouldInvalidateReactRefreshBoundary(prevSignature, nextSignature) {\n  if (prevSignature.length !== nextSignature.length) {\n    return true;\n  }\n  for (var i = 0; i < nextSignature.length; i++) {\n    if (prevSignature[i] !== nextSignature[i]) {\n      return true;\n    }\n  }\n  return false;\n}\nvar isUpdateScheduled = false;\n// This function aggregates updates from multiple modules into a single React Refresh call.\nfunction scheduleUpdate() {\n  if (isUpdateScheduled) {\n    return;\n  }\n  isUpdateScheduled = true;\n  function canApplyUpdate(status) {\n    return status === 'idle';\n  }\n  function applyUpdate() {\n    isUpdateScheduled = false;\n    try {\n      runtime_1[\"default\"].performReactRefresh();\n    } catch (err) {\n      console.warn('Warning: Failed to re-render. We will retry on the next Fast Refresh event.\\n' + err);\n    }\n  }\n  if (canApplyUpdate(module.hot.status())) {\n    // Apply update on the next tick.\n    Promise.resolve().then(function () {\n      applyUpdate();\n    });\n    return;\n  }\n  var statusHandler = function statusHandler(status) {\n    if (canApplyUpdate(status)) {\n      module.hot.removeStatusHandler(statusHandler);\n      applyUpdate();\n    }\n  };\n  // Apply update once the HMR runtime's status is idle.\n  module.hot.addStatusHandler(statusHandler);\n}\n// Needs to be compatible with IE11\nexports[\"default\"] = {\n  registerExportsForReactRefresh: registerExportsForReactRefresh,\n  isReactRefreshBoundary: isReactRefreshBoundary,\n  shouldInvalidateReactRefreshBoundary: shouldInvalidateReactRefreshBoundary,\n  getRefreshBoundarySignature: getRefreshBoundarySignature,\n  scheduleUpdate: scheduleUpdate\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BuZXh0L3JlYWN0LXJlZnJlc2gtdXRpbHMvZGlzdC9pbnRlcm5hbC9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7O0FBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3QkE7QUFDQTtBQUNBO0FBQ0E7QUFFQSxJQUFBQSxTQUFBLEdBQUFDLGVBQUEsQ0FBQUMsbUJBQUEsNkdBQWtEO0FBc0JsRCxTQUFTQyxZQUFZQSxDQUFDQyxHQUFXO0VBQy9CLE9BQ0VBLEdBQUcsS0FBSyxZQUFZLElBQ3BCQSxHQUFHLEtBQUssU0FBUyxJQUNqQkEsR0FBRyxLQUFLLFNBQVM7RUFDakI7RUFDQUEsR0FBRyxLQUFLLFFBQVE7QUFFcEI7QUFFQSxTQUFTQyw4QkFBOEJBLENBQ3JDQyxhQUFzQixFQUN0QkMsUUFBZ0I7RUFFaEJQLFNBQUEsV0FBYyxDQUFDUSxRQUFRLENBQUNGLGFBQWEsRUFBRUMsUUFBUSxHQUFHLFlBQVksQ0FBQztFQUMvRCxJQUFJRCxhQUFhLElBQUksSUFBSSxJQUFJLE9BQU9BLGFBQWEsS0FBSyxRQUFRLEVBQUU7SUFDOUQ7SUFDQTtJQUNBO0VBQ0Y7RUFDQSxLQUFLLElBQUlGLEdBQUcsSUFBSUUsYUFBYSxFQUFFO0lBQzdCLElBQUlILFlBQVksQ0FBQ0MsR0FBRyxDQUFDLEVBQUU7TUFDckI7SUFDRjtJQUNBLElBQUk7TUFDRixJQUFJSyxXQUFXLEdBQUdILGFBQWEsQ0FBQ0YsR0FBRyxDQUFDO0lBQ3RDLENBQUMsQ0FBQyxPQUFBTSxFQUFBLEVBQU07TUFDTjtNQUNBO0lBQ0Y7SUFDQSxJQUFJQyxNQUFNLEdBQUdKLFFBQVEsR0FBRyxhQUFhLEdBQUdILEdBQUc7SUFDM0NKLFNBQUEsV0FBYyxDQUFDUSxRQUFRLENBQUNDLFdBQVcsRUFBRUUsTUFBTSxDQUFDO0VBQzlDO0FBQ0Y7QUFFQSxTQUFTQywyQkFBMkJBLENBQUNOLGFBQXNCO0VBQ3pELElBQUlPLFNBQVMsR0FBRyxF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QUFNLEVBQUUsQ0FBQyxFQUFFO0lBQ3ZDO0lBQ0FRLE9BQU8sQ0FBQ0MsT0FBTyxFQUFFLENBQUNDLElBQUksQ0FBQyxZQUFLO01BQzFCVCxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUM7SUFDRjtFQUNGO0VBRUEsSUFBTVUsYUFBYSxHQUFHLFNBQWhCQSxhQUFhQSxDQUFJWCxNQUFNLEVBQUk7SUFDL0IsSUFBSUQsY0FBYyxDQUFDQyxNQUFNLENBQUMsRUFBRTtNQUMxQk0sVUFBVSxDQUFDTSxtQkFBbUIsQ0FBQ0QsYUFBYSxDQUFDO01BQzdDVixXQUFXLEVBQUU7SUFDZjtFQUNGLENBQUM7RUFFRDtFQUNBSyxVQUFVLENBQUNPLGdCQUFnQixDQUFDRixhQUFhLENBQUM7QUFDNUM7QUFFQTtBQUNBRyxrQkFBQSxHQUFlO0VBQ2JyQyw4QkFBOEIsRUFBRUEsOEJBQThCO0VBQzlEVyxzQkFBc0IsRUFBRUEsc0JBQXNCO0VBQzlDSSxvQ0FBb0MsRUFBRUEsb0NBQW9DO0VBQzFFUiwyQkFBMkIsRUFBRUEsMkJBQTJCO0VBQ3hEYyxjQUFjLEVBQUVBO0NBQ2pCIiwic291cmNlcyI6WyJGOlxcVUFFIFBST0pFQ1RTXFxEVUJBSV9QUk9KRUNUXFxpbnRlcm5hbFxcaGVscGVycy50cyJdLCJuYW1lcyI6WyJydW50aW1lXzEiLCJfX2ltcG9ydERlZmF1bHQiLCJyZXF1aXJlIiwiaXNTYWZlRXhwb3J0Iiwia2V5IiwicmVnaXN0ZXJFeHBvcnRzRm9yUmVhY3RSZWZyZXNoIiwibW9kdWxlRXhwb3J0cyIsIm1vZHVsZUlEIiwicmVnaXN0ZXIiLCJleHBvcnRWYWx1ZSIsIl9hIiwidHlwZUlEIiwiZ2V0UmVmcmVzaEJvdW5kYXJ5U2lnbmF0dXJlIiwic2lnbmF0dXJlIiwicHVzaCIsImdldEZhbWlseUJ5VHlwZSIsImlzUmVhY3RSZWZyZXNoQm91bmRhcnkiLCJpc0xpa2VseUNvbXBvbmVudFR5cGUiLCJoYXNFeHBvcnRzIiwiYXJlQWxsRXhwb3J0c0NvbXBvbmVudHMiLCJzaG91bGRJbnZhbGlkYXRlUmVhY3RSZWZyZXNoQm91bmRhcnkiLCJwcmV2U2lnbmF0dXJlIiwibmV4dFNpZ25hdHVyZSIsImxlbmd0aCIsImkiLCJpc1VwZGF0ZVNjaGVkdWxlZCIsInNjaGVkdWxlVXBkYXRlIiwiY2FuQXBwbHlVcGRhdGUiLCJzdGF0dXMiLCJhcHBseVVwZGF0ZSIsInBlcmZvcm1SZWFjdFJlZnJlc2giLCJlcnIiLCJjb25zb2xlIiwid2FybiIsIm1vZHVsZSIsImhvdCIsIlByb21pc2UiLCJyZXNvbHZlIiwidGhlbiIsInN0YXR1c0hhbmRsZXIiLCJyZW1vdmVTdGF0dXNIYW5kbGVyIiwiYWRkU3RhdHVzSGFuZGxlciIsImV4cG9ydHMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/helpers.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nvar runtime_1 = __importDefault(__webpack_require__(/*! next/dist/compiled/react-refresh/runtime */ \"./node_modules/next/dist/compiled/react-refresh/runtime.js\"));\nvar helpers_1 = __importDefault(__webpack_require__(/*! ./internal/helpers */ \"./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/internal/helpers.js\"));\n// Hook into ReactDOM initialization\nruntime_1[\"default\"].injectIntoGlobalHook(self);\n// Register global helpers\nself.$RefreshHelpers$ = helpers_1[\"default\"];\n// Register a helper for module execution interception\nself.$RefreshInterceptModuleExecution$ = function (webpackModuleId) {\n  var prevRefreshReg = self.$RefreshReg$;\n  var prevRefreshSig = self.$RefreshSig$;\n  self.$RefreshReg$ = function (type, id) {\n    runtime_1[\"default\"].register(type, webpackModuleId + ' ' + id);\n  };\n  self.$RefreshSig$ = runtime_1[\"default\"].createSignatureFunctionForTransform;\n  // Modeled after `useEffect` cleanup pattern:\n  // https://react.dev/learn/synchronizing-with-effects#step-3-add-cleanup-if-needed\n  return function () {\n    self.$RefreshReg$ = prevRefreshReg;\n    self.$RefreshSig$ = prevRefreshSig;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL0BuZXh0L3JlYWN0LXJlZnJlc2gtdXRpbHMvZGlzdC9ydW50aW1lLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxTQUFBLEdBQUFDLGVBQUEsQ0FBQUMsbUJBQUEsNkdBQWtEO0FBQ2xELElBQUFDLFNBQUEsR0FBQUYsZUFBQSxDQUFBQyxtQkFBQTtBQVdBO0FBQ0FGLFNBQUEsV0FBYyxDQUFDSSxvQkFBb0IsQ0FBQ0MsSUFBSSxDQUFDO0FBRXpDO0FBQ0FBLElBQUksQ0FBQ0MsZ0JBQWdCLEdBQUdILFNBQUEsV0FBYztBQUV0QztBQUNBRSxJQUFJLENBQUNFLGlDQUFpQyxHQUFHLFVBQVVDLGVBQWU7RUFDaEUsSUFBSUMsY0FBYyxHQUFHSixJQUFJLENBQUNLLFlBQVk7RUFDdEMsSUFBSUMsY0FBYyxHQUFHTixJQUFJLENBQUNPLFlBQVk7RUFFdENQLElBQUksQ0FBQ0ssWUFBWSxHQUFHLFVBQVVHLElBQUksRUFBRUMsRUFBRTtJQUNwQ2QsU0FBQSxXQUFjLENBQUNlLFFBQVEsQ0FBQ0YsSUFBSSxFQUFFTCxlQUFlLEdBQUcsR0FBRyxHQUFHTSxFQUFFLENBQUM7RUFDM0QsQ0FBQztFQUNEVCxJQUFJLENBQUNPLFlBQVksR0FBR1osU0FBQSxXQUFjLENBQUNnQixtQ0FBbUM7RUFFdEU7RUFDQTtFQUNBLE9BQU87SUFDTFgsSUFBSSxDQUFDSyxZQUFZLEdBQUdELGNBQWM7SUFDbENKLElBQUksQ0FBQ08sWUFBWSxHQUFHRCxjQUFjO0VBQ3BDLENBQUM7QUFDSCxDQUFDIiwic291cmNlcyI6WyJGOlxcVUFFIFBST0pFQ1RTXFxEVUJBSV9QUk9KRUNUXFwyN21hcmNoX2Jsb2dfbGlzdGluZ19zaXRlbWFwX2RvbmVcXHJ1bnRpbWUudHMiXSwibmFtZXMiOlsicnVudGltZV8xIiwiX19pbXBvcnREZWZhdWx0IiwicmVxdWlyZSIsImhlbHBlcnNfMSIsImluamVjdEludG9HbG9iYWxIb29rIiwic2VsZiIsIiRSZWZyZXNoSGVscGVycyQiLCIkUmVmcmVzaEludGVyY2VwdE1vZHVsZUV4ZWN1dGlvbiQiLCJ3ZWJwYWNrTW9kdWxlSWQiLCJwcmV2UmVmcmVzaFJlZyIsIiRSZWZyZXNoUmVnJCIsInByZXZSZWZyZXNoU2lnIiwiJFJlZnJlc2hTaWckIiwidHlwZSIsImlkIiwicmVnaXN0ZXIiLCJjcmVhdGVTaWduYXR1cmVGdW5jdGlvbkZvclRyYW5zZm9ybSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("/**\n * @license React\n * react-refresh-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\n\nif (true) {\n  (function () {\n    'use strict';\n\n    // ATTENTION\n    var REACT_FORWARD_REF_TYPE = Symbol[\"for\"]('react.forward_ref');\n    var REACT_MEMO_TYPE = Symbol[\"for\"]('react.memo');\n    var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // We never remove these associations.\n    // It's OK to reference families, but use WeakMap/Set for types.\n\n    var allFamiliesByID = new Map();\n    var allFamiliesByType = new PossiblyWeakMap();\n    var allSignaturesByType = new PossiblyWeakMap(); // This WeakMap is read by React, so we only put families\n    // that have actually been edited here. This keeps checks fast.\n    // $FlowIssue\n\n    var updatedFamiliesByType = new PossiblyWeakMap(); // This is cleared on every performReactRefresh() call.\n    // It is an array of [Family, NextType] tuples.\n\n    var pendingUpdates = []; // This is injected by the renderer via DevTools global hook.\n\n    var helpersByRendererID = new Map();\n    var helpersByRoot = new Map(); // We keep track of mounted roots so we can schedule updates.\n\n    var mountedRoots = new Set(); // If a root captures an error, we remember it so we can retry on edit.\n\n    var failedRoots = new Set(); // In environments that support WeakMap, we also remember the last element for every root.\n    // It needs to be weak because we do this even for roots that failed to mount.\n    // If there is no WeakMap, we won't attempt to do retrying.\n    // $FlowIssue\n\n    var rootElements =\n    // $FlowIssue\n    typeof WeakMap === 'function' ? new WeakMap() : null;\n    var isPerformingRefresh = false;\n    function computeFullKey(signature) {\n      if (signature.fullKey !== null) {\n        return signature.fullKey;\n      }\n      var fullKey = signature.ownKey;\n      var hooks;\n      try {\n        hooks = signature.getCustomHooks();\n      } catch (err) {\n        // This can happen in an edge case, e.g. if expression like Foo.useSomething\n        // depends on Foo which is lazily initialized during rendering.\n        // In that case just assume we'll have to remount.\n        signature.forceReset = true;\n        signature.fullKey = fullKey;\n        return fullKey;\n      }\n      for (var i = 0; i < hooks.length; i++) {\n        var hook = hooks[i];\n        if (typeof hook !== 'function') {\n          // Something's wrong. Assume we need to remount.\n          signature.forceReset = true;\n          signature.fullKey = fullKey;\n          return fullKey;\n        }\n        var nestedHookSignature = allSignaturesByType.get(hook);\n        if (nestedHookSignature === undefined) {\n          // No signature means Hook wasn't in the source code, e.g. in a library.\n          // We'll skip it because we can assume it won't change during this session.\n          continue;\n        }\n        var nestedHookKey = computeFullKey(nestedHookSignature);\n        if (nestedHookSignature.forceReset) {\n          signature.forceReset = true;\n        }\n        fullKey += '\\n---\\n' + nestedHookKey;\n      }\n      signature.fullKey = fullKey;\n      return fullKey;\n    }\n    function haveEqualSignatures(prevType, nextType) {\n      var prevSignature = allSignaturesByType.get(prevType);\n      var nextSignature = allSignaturesByType.get(nextType);\n      if (prevSignature === undefined && nextSignature === undefined) {\n        return true;\n      }\n      if (prevSignature === undefined || nextSignature === undefined) {\n        return false;\n      }\n      if (computeFullKey(prevSignature) !== computeFullKey(nextSignature)) {\n        return false;\n      }\n      if (nextSignature.forceReset) {\n        return false;\n      }\n      return true;\n    }\n    function isReactClass(type) {\n      return type.prototype && type.prototype.isReactComponent;\n    }\n    function canPreserveStateBetween(prevType, nextType) {\n      if (isReactClass(prevType) || isReactClass(nextType)) {\n        return false;\n      }\n      if (haveEqualSignatures(prevType, nextType)) {\n        return true;\n      }\n      return false;\n    }\n    function resolveFamily(type) {\n      // Only check updated types to keep lookups fast.\n      return updatedFamiliesByType.get(type);\n    } // If we didn't care about IE11, we could use new Map/Set(iterable).\n\n    function cloneMap(map) {\n      var clone = new Map();\n      map.forEach(function (value, key) {\n        clone.set(key, value);\n      });\n      return clone;\n    }\n    function cloneSet(set) {\n      var clone = new Set();\n      set.forEach(function (value) {\n        clone.add(value);\n      });\n      return clone;\n    } // This is a safety mechanism to protect against rogue getters and Proxies.\n\n    function getProperty(object, property) {\n      try {\n        return object[property];\n      } catch (err) {\n        // Intentionally ignore.\n        return undefined;\n      }\n    }\n    function performReactRefresh() {\n      if (pendingUpdates.length === 0) {\n        return null;\n      }\n      if (isPerformingRefresh) {\n        return null;\n      }\n      isPerformingRefresh = true;\n      try {\n        var staleFamilies = new Set();\n        var updatedFamilies = new Set();\n        var updates = pendingUpdates;\n        pendingUpdates = [];\n        updates.forEach(function (_ref) {\n          var family = _ref[0],\n            nextType = _ref[1];\n          // Now that we got a real edit, we can create associations\n          // that will be read by the React reconciler.\n          var prevType = family.current;\n          updatedFamiliesByType.set(prevType, family);\n          updatedFamiliesByType.set(nextType, family);\n          family.current = nextType; // Determine whether this should be a re-render or a re-mount.\n\n          if (canPreserveStateBetween(prevType, nextType)) {\n            updatedFamilies.add(family);\n          } else {\n            staleFamilies.add(family);\n          }\n        }); // TODO: rename these fields to something more meaningful.\n\n        var update = {\n          updatedFamilies: updatedFamilies,\n          // Families that will re-render preserving state\n          staleFamilies: staleFamilies // Families that will be remounted\n        };\n        helpersByRendererID.forEach(function (helpers) {\n          // Even if there are no roots, set the handler on first update.\n          // This ensures that if *new* roots are mounted, they'll use the resolve handler.\n          helpers.setRefreshHandler(resolveFamily);\n        });\n        var didError = false;\n        var firstError = null; // We snapshot maps and sets that are mutated during commits.\n        // If we don't do this, there is a risk they will be mutated while\n        // we iterate over them. For example, trying to recover a failed root\n        // may cause another root to be added to the failed list -- an infinite loop.\n\n        var failedRootsSnapshot = cloneSet(failedRoots);\n        var mountedRootsSnapshot = cloneSet(mountedRoots);\n        var helpersByRootSnapshot = cloneMap(helpersByRoot);\n        failedRootsSnapshot.forEach(function (root) {\n          var helpers = helpersByRootSnapshot.get(root);\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n          if (!failedRoots.has(root)) {// No longer failed.\n          }\n          if (rootElements === null) {\n            return;\n          }\n          if (!rootElements.has(root)) {\n            return;\n          }\n          var element = rootElements.get(root);\n          try {\n            helpers.scheduleRoot(root, element);\n          } catch (err) {\n            if (!didError) {\n              didError = true;\n              firstError = err;\n            } // Keep trying other roots.\n          }\n        });\n        mountedRootsSnapshot.forEach(function (root) {\n          var helpers = helpersByRootSnapshot.get(root);\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n          if (!mountedRoots.has(root)) {// No longer mounted.\n          }\n          try {\n            helpers.scheduleRefresh(root, update);\n          } catch (err) {\n            if (!didError) {\n              didError = true;\n              firstError = err;\n            } // Keep trying other roots.\n          }\n        });\n        if (didError) {\n          throw firstError;\n        }\n        return update;\n      } finally {\n        isPerformingRefresh = false;\n      }\n    }\n    function register(type, id) {\n      {\n        if (type === null) {\n          return;\n        }\n        if (typeof type !== 'function' && typeof type !== 'object') {\n          return;\n        } // This can happen in an edge case, e.g. if we register\n        // return value of a HOC but it returns a cached component.\n        // Ignore anything but the first registration for each type.\n\n        if (allFamiliesByType.has(type)) {\n          return;\n        } // Create family or remember to update it.\n        // None of this bookkeeping affects reconciliation\n        // until the first performReactRefresh() call above.\n\n        var family = allFamiliesByID.get(id);\n        if (family === undefined) {\n          family = {\n            current: type\n          };\n          allFamiliesByID.set(id, family);\n        } else {\n          pendingUpdates.push([family, type]);\n        }\n        allFamiliesByType.set(type, family); // Visit inner types because we might not have registered them.\n\n        if (typeof type === 'object' && type !== null) {\n          switch (getProperty(type, '$$typeof')) {\n            case REACT_FORWARD_REF_TYPE:\n              register(type.render, id + '$render');\n              break;\n            case REACT_MEMO_TYPE:\n              register(type.type, id + '$type');\n              break;\n          }\n        }\n      }\n    }\n    function setSignature(type, key) {\n      var forceReset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var getCustomHooks = arguments.length > 3 ? arguments[3] : undefined;\n      {\n        if (!allSignaturesByType.has(type)) {\n          allSignaturesByType.set(type, {\n            forceReset: forceReset,\n            ownKey: key,\n            fullKey: null,\n            getCustomHooks: getCustomHooks || function () {\n              return [];\n            }\n          });\n        } // Visit inner types because we might not have signed them.\n\n        if (typeof type === 'object' && type !== null) {\n          switch (getProperty(type, '$$typeof')) {\n            case REACT_FORWARD_REF_TYPE:\n              setSignature(type.render, key, forceReset, getCustomHooks);\n              break;\n            case REACT_MEMO_TYPE:\n              setSignature(type.type, key, forceReset, getCustomHooks);\n              break;\n          }\n        }\n      }\n    } // This is lazily called during first render for a type.\n    // It captures Hook list at that time so inline requires don't break comparisons.\n\n    function collectCustomHooksForSignature(type) {\n      {\n        var signature = allSignaturesByType.get(type);\n        if (signature !== undefined) {\n          computeFullKey(signature);\n        }\n      }\n    }\n    function getFamilyByID(id) {\n      {\n        return allFamiliesByID.get(id);\n      }\n    }\n    function getFamilyByType(type) {\n      {\n        return allFamiliesByType.get(type);\n      }\n    }\n    function findAffectedHostInstances(families) {\n      {\n        var affectedInstances = new Set();\n        mountedRoots.forEach(function (root) {\n          var helpers = helpersByRoot.get(root);\n          if (helpers === undefined) {\n            throw new Error('Could not find helpers for a root. This is a bug in React Refresh.');\n          }\n          var instancesForRoot = helpers.findHostInstancesForRefresh(root, families);\n          instancesForRoot.forEach(function (inst) {\n            affectedInstances.add(inst);\n          });\n        });\n        return affectedInstances;\n      }\n    }\n    function injectIntoGlobalHook(globalObject) {\n      {\n        // For React Native, the global hook will be set up by require('react-devtools-core').\n        // That code will run before us. So we need to monkeypatch functions on existing hook.\n        // For React Web, the global hook will be set up by the extension.\n        // This will also run before us.\n        var hook = globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__;\n        if (hook === undefined) {\n          // However, if there is no DevTools extension, we'll need to set up the global hook ourselves.\n          // Note that in this case it's important that renderer code runs *after* this method call.\n          // Otherwise, the renderer will think that there is no global hook, and won't do the injection.\n          var nextID = 0;\n          globalObject.__REACT_DEVTOOLS_GLOBAL_HOOK__ = hook = {\n            renderers: new Map(),\n            supportsFiber: true,\n            inject: function inject(injected) {\n              return nextID++;\n            },\n            onScheduleFiberRoot: function onScheduleFiberRoot(id, root, children) {},\n            onCommitFiberRoot: function onCommitFiberRoot(id, root, maybePriorityLevel, didError) {},\n            onCommitFiberUnmount: function onCommitFiberUnmount() {}\n          };\n        }\n        if (hook.isDisabled) {\n          // This isn't a real property on the hook, but it can be set to opt out\n          // of DevTools integration and associated warnings and logs.\n          // Using console['warn'] to evade Babel and ESLint\n          console['warn']('Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). ' + 'Fast Refresh is not compatible with this shim and will be disabled.');\n          return;\n        } // Here, we just want to get a reference to scheduleRefresh.\n\n        var oldInject = hook.inject;\n        hook.inject = function (injected) {\n          var id = oldInject.apply(this, arguments);\n          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\n            // This version supports React Refresh.\n            helpersByRendererID.set(id, injected);\n          }\n          return id;\n        }; // Do the same for any already injected roots.\n        // This is useful if ReactDOM has already been initialized.\n        // https://github.com/facebook/react/issues/17626\n\n        hook.renderers.forEach(function (injected, id) {\n          if (typeof injected.scheduleRefresh === 'function' && typeof injected.setRefreshHandler === 'function') {\n            // This version supports React Refresh.\n            helpersByRendererID.set(id, injected);\n          }\n        }); // We also want to track currently mounted roots.\n\n        var oldOnCommitFiberRoot = hook.onCommitFiberRoot;\n        var oldOnScheduleFiberRoot = hook.onScheduleFiberRoot || function () {};\n        hook.onScheduleFiberRoot = function (id, root, children) {\n          if (!isPerformingRefresh) {\n            // If it was intentionally scheduled, don't attempt to restore.\n            // This includes intentionally scheduled unmounts.\n            failedRoots[\"delete\"](root);\n            if (rootElements !== null) {\n              rootElements.set(root, children);\n            }\n          }\n          return oldOnScheduleFiberRoot.apply(this, arguments);\n        };\n        hook.onCommitFiberRoot = function (id, root, maybePriorityLevel, didError) {\n          var helpers = helpersByRendererID.get(id);\n          if (helpers !== undefined) {\n            helpersByRoot.set(root, helpers);\n            var current = root.current;\n            var alternate = current.alternate; // We need to determine whether this root has just (un)mounted.\n            // This logic is copy-pasted from similar logic in the DevTools backend.\n            // If this breaks with some refactoring, you'll want to update DevTools too.\n\n            if (alternate !== null) {\n              var wasMounted = alternate.memoizedState != null && alternate.memoizedState.element != null && mountedRoots.has(root);\n              var isMounted = current.memoizedState != null && current.memoizedState.element != null;\n              if (!wasMounted && isMounted) {\n                // Mount a new root.\n                mountedRoots.add(root);\n                failedRoots[\"delete\"](root);\n              } else if (wasMounted && isMounted) ;else if (wasMounted && !isMounted) {\n                // Unmount an existing root.\n                mountedRoots[\"delete\"](root);\n                if (didError) {\n                  // We'll remount it on future edits.\n                  failedRoots.add(root);\n                } else {\n                  helpersByRoot[\"delete\"](root);\n                }\n              } else if (!wasMounted && !isMounted) {\n                if (didError) {\n                  // We'll remount it on future edits.\n                  failedRoots.add(root);\n                }\n              }\n            } else {\n              // Mount a new root.\n              mountedRoots.add(root);\n            }\n          } // Always call the decorated DevTools hook.\n\n          return oldOnCommitFiberRoot.apply(this, arguments);\n        };\n      }\n    }\n    function hasUnrecoverableErrors() {\n      // TODO: delete this after removing dependency in RN.\n      return false;\n    } // Exposed for testing.\n\n    function _getMountedRootCount() {\n      {\n        return mountedRoots.size;\n      }\n    } // This is a wrapper over more primitive functions for setting signature.\n    // Signatures let us decide whether the Hook order has changed on refresh.\n    //\n    // This function is intended to be used as a transform target, e.g.:\n    // var _s = createSignatureFunctionForTransform()\n    //\n    // function Hello() {\n    //   const [foo, setFoo] = useState(0);\n    //   const value = useCustomHook();\n    //   _s(); /* Call without arguments triggers collecting the custom Hook list.\n    //          * This doesn't happen during the module evaluation because we\n    //          * don't want to change the module order with inline requires.\n    //          * Next calls are noops. */\n    //   return <h1>Hi</h1>;\n    // }\n    //\n    // /* Call with arguments attaches the signature to the type: */\n    // _s(\n    //   Hello,\n    //   'useState{[foo, setFoo]}(0)',\n    //   () => [useCustomHook], /* Lazy to avoid triggering inline requires */\n    // );\n\n    function createSignatureFunctionForTransform() {\n      {\n        var savedType;\n        var hasCustomHooks;\n        var didCollectHooks = false;\n        return function (type, key, forceReset, getCustomHooks) {\n          if (typeof key === 'string') {\n            // We're in the initial phase that associates signatures\n            // with the functions. Note this may be called multiple times\n            // in HOC chains like _s(hoc1(_s(hoc2(_s(actualFunction))))).\n            if (!savedType) {\n              // We're in the innermost call, so this is the actual type.\n              savedType = type;\n              hasCustomHooks = typeof getCustomHooks === 'function';\n            } // Set the signature for all types (even wrappers!) in case\n            // they have no signatures of their own. This is to prevent\n            // problems like https://github.com/facebook/react/issues/20417.\n\n            if (type != null && (typeof type === 'function' || typeof type === 'object')) {\n              setSignature(type, key, forceReset, getCustomHooks);\n            }\n            return type;\n          } else {\n            // We're in the _s() call without arguments, which means\n            // this is the time to collect custom Hook signatures.\n            // Only do this once. This path is hot and runs *inside* every render!\n            if (!didCollectHooks && hasCustomHooks) {\n              didCollectHooks = true;\n              collectCustomHooksForSignature(savedType);\n            }\n          }\n        };\n      }\n    }\n    function isLikelyComponentType(type) {\n      {\n        switch (typeof type) {\n          case 'function':\n            {\n              // First, deal with classes.\n              if (type.prototype != null) {\n                if (type.prototype.isReactComponent) {\n                  // React class.\n                  return true;\n                }\n                var ownNames = Object.getOwnPropertyNames(type.prototype);\n                if (ownNames.length > 1 || ownNames[0] !== 'constructor') {\n                  // This looks like a class.\n                  return false;\n                } // eslint-disable-next-line no-proto\n\n                if (type.prototype.__proto__ !== Object.prototype) {\n                  // It has a superclass.\n                  return false;\n                } // Pass through.\n                // This looks like a regular function with empty prototype.\n              } // For plain functions and arrows, use name as a heuristic.\n\n              var name = type.name || type.displayName;\n              return typeof name === 'string' && /^[A-Z]/.test(name);\n            }\n          case 'object':\n            {\n              if (type != null) {\n                switch (getProperty(type, '$$typeof')) {\n                  case REACT_FORWARD_REF_TYPE:\n                  case REACT_MEMO_TYPE:\n                    // Definitely React components.\n                    return true;\n                  default:\n                    return false;\n                }\n              }\n              return false;\n            }\n          default:\n            {\n              return false;\n            }\n        }\n      }\n    }\n    exports._getMountedRootCount = _getMountedRootCount;\n    exports.collectCustomHooksForSignature = collectCustomHooksForSignature;\n    exports.createSignatureFunctionForTransform = createSignatureFunctionForTransform;\n    exports.findAffectedHostInstances = findAffectedHostInstances;\n    exports.getFamilyByID = getFamilyByID;\n    exports.getFamilyByType = getFamilyByType;\n    exports.hasUnrecoverableErrors = hasUnrecoverableErrors;\n    exports.injectIntoGlobalHook = injectIntoGlobalHook;\n    exports.isLikelyComponentType = isLikelyComponentType;\n    exports.performReactRefresh = performReactRefresh;\n    exports.register = register;\n    exports.setSignature = setSignature;\n  })();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXJlZnJlc2gvY2pzL3JlYWN0LXJlZnJlc2gtcnVudGltZS5kZXZlbG9wbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRWE7O0FBRWIsSUFBSUEsSUFBcUMsRUFBRTtFQUN6QyxDQUFDLFlBQVc7SUFDZCxZQUFZOztJQUVaO0lBQ0EsSUFBSUcsc0JBQXNCLEdBQUdDLE1BQU0sT0FBSSxDQUFDLG1CQUFtQixDQUFDO0lBQzVELElBQUlDLGVBQWUsR0FBR0QsTUFBTSxPQUFJLENBQUMsWUFBWSxDQUFDO0lBRTlDLElBQUlFLGVBQWUsR0FBRyxPQUFPQyxPQUFPLEtBQUssVUFBVSxHQUFHQSxPQUFPLEdBQUdDLEdBQUcsQ0FBQyxDQUFDO0lBQ3JFOztJQUVBLElBQUlDLGVBQWUsR0FBRyxJQUFJRCxHQUFHLENBQUMsQ0FBQztJQUMvQixJQUFJRSxpQkFBaUIsR0FBRyxJQUFJSixlQUFlLENBQUMsQ0FBQztJQUM3QyxJQUFJSyxtQkFBbUIsR0FBRyxJQUFJTCxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakQ7SUFDQTs7SUFFQSxJQUFJTSxxQkFBcUIsR0FBRyxJQUFJTixlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQ7O0lBRUEsSUFBSU8sY0FBYyxHQUFHLEVBQUUsQ0FBQyxDQUFDOztJQUV6QixJQUFJQyxtQkFBbUIsR0FBRyxJQUFJTixHQUFHLENBQUMsQ0FBQztJQUNuQyxJQUFJTyxhQUFhLEdBQUcsSUFBSVAsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUUvQixJQUFJUSxZQUFZLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDOztJQUU5QixJQUFJQyxXQUFXLEdBQUcsSUFBSUQsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdCO0lBQ0E7SUFDQTs7SUFFQSxJQUFJRSxZQUFZO0lBQUc7SUFDbkIsT0FBT1osT0FBTyxLQUFLLFVBQVUsR0FBRyxJQUFJQSxPQUFPLENBQUMsQ0FBQyxHQUFHLElBQUk7SUFDcEQsSUFBSWEsbUJBQW1CLEdBQUcsS0FBSztJQUUvQixTQUFTQyxjQUFjQSxDQUFDQyxTQUFTLEVBQUU7TUFDakMsSUFBSUEsU0FBUyxDQUFDQyxPQUFPLEtBQUssSUFBSSxFQUFFO1FBQzlCLE9BQU9ELFNBQVMsQ0FBQ0MsT0FBTztNQUMxQjtNQUVBLElBQUlBLE9BQU8sR0FBR0QsU0FBUyxDQUFDRSxNQUFNO01BQzlCLElBQUlDLEtBQUs7TUFFVCxJQUFJO1FBQ0ZBLEtBQUssR0FBR0gsU0FBUyxDQUFDSSxjQUFjLENBQUMsQ0FBQztNQUNwQyxDQUFDLENBQUMsT0FBT0MsR0FBRyxFQUFFO1FBQ1o7UUFDQTtRQUNBO1FBQ0FMLFNBQVMsQ0FBQ00sVUFBVSxHQUFHLElBQUk7UUFDM0JOLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO1FBQzNCLE9BQU9BLE9BQU87TUFDaEI7TUFFQSxLQUFLLElBQUlNLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0osS0FBSyxDQUFDSyxNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO1FBQ3JDLElBQUlFLElBQUksR0FBR04sS0FBSyxDQUFDSSxDQUFDLENBQUM7UUFFbkIsSUFBSSxPQUFPRSxJQUFJLEtBQUssVUFBVSxFQUFFO1VBQzlCO1VBQ0FULFNBQVMsQ0FBQ00sVUFBVSxHQUFHLElBQUk7VUFDM0JOLFNBQVMsQ0FBQ0MsT0FBTyxHQUFHQSxPQUFPO1VBQzNCLE9BQU9BLE9BQU87UUFDaEI7UUFFQSxJQUFJUyxtQkFBbUIsR0FBR3JCLG1CQUFtQixDQUFDc0IsR0FBRyxDQUFDRixJQUFJLENBQUM7UUFFdkQsSUFBSUMsbUJBQW1CLEtBQUtFLFNBQVMsRUFBRTtVQUNyQztVQUNBO1VBQ0E7UUFDRjtRQUVBLElBQUlDLGFBQWEsR0FBR2QsY0FBYyxDQUFDVyxtQkFBbUIsQ0FBQztRQUV2RCxJQUFJQSxtQkFBbUIsQ0FBQ0osVUFBVSxFQUFFO1VBQ2xDTixTQUFTLENBQUNNLFVBQVUsR0FBRyxJQUFJO1FBQzdCO1FBRUFMLE9BQU8sSUFBSSxTQUFTLEdBQUdZLGFBQWE7TUFDdEM7TUFFQWIsU0FBUyxDQUFDQyxPQUFPLEdBQUdBLE9BQU87TUFDM0IsT0FBT0EsT0FBTztJQUNoQjtJQUVBLFNBQVNhLG1CQUFtQkEsQ0FBQ0MsUUFBUSxFQUFFQyxRQUFRLEVBQUU7TUFDL0MsSUFBSUMsYUFBYSxHQUFHNUIsbUJBQW1CLENBQUNzQixHQUFHLENBQUNJLFFBQVEsQ0FBQztNQUNyRCxJQUFJRyxhQUFhLEdBQUc3QixtQkFBbUIsQ0FBQ3NCLEdBQUcsQ0FBQ0ssUUFBUSxDQUFDO01BRXJELElBQUlDLGFBQWEsS0FBS0wsU0FBUyxJQUFJTSxhQUFhLEtBQUtOLFNBQVMsRUFBRTtRQUM5RCxPQUFPLElBQUk7TUFDYjtNQUVBLElBQUlLLGFBQWEsS0FBS0wsU0FBUyxJQUFJTSxhQUFhLEtBQUtOLFNBQVMsRUFBRTtRQUM5RCxPQUFPLEtBQUs7TUFDZDtNQUVBLElBQUliLGNBQWMsQ0FBQ2tCLGFBQWEsQ0FBQyxLQUFLbEIsY0FBYyxDQUFDbUIsYUFBYSxDQUFDLEVBQUU7UUFDbkUsT0FBTyxLQUFLO01BQ2Q7TUFFQSxJQUFJQSxhQUFhLENBQUNaLFVBQVUsRUFBRTtRQUM1QixPQUFPLEtBQUs7TUFDZDtNQUVBLE9BQU8sSUFBSTtJQUNiO0lBRUEsU0FBU2EsWUFBWUEsQ0FBQ0MsSUFBSSxFQUFFO01BQzFCLE9BQU9BLElBQUksQ0FBQ0MsU0FBUyxJQUFJRCxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsZ0JBQWdCO0lBQzFEO0lBRUEsU0FBU0MsdUJBQXVCQSxDQUFDUixRQUFRLEVBQUVDLFFBQVEsRUFBRTtNQUNuRCxJQUFJRyxZQUFZLENBQUNKLFFBQVEsQ0FBQyxJQUFJSSxZQUFZLENBQUNILFFBQVEsQ0FBQyxFQUFFO1FBQ3BELE9BQU8sS0FBSztNQUNkO01BRUEsSUFBSUYsbUJBQW1CLENBQUNDLFFBQVEsRUFBRUMsUUFBUSxDQUFDLEVBQUU7UUFDM0MsT0FBTyxJQUFJO01BQ2I7TUFFQSxPQUFPLEtBQUs7SUFDZDtJQUVBLFNBQVNRLGFBQWFBLENBQUNKLElBQUksRUFBRTtNQUMzQjtNQUNBLE9BQU85QixxQkFBcUIsQ0FBQ3FCLEdBQUcsQ0FBQ1MsSUFBSSxDQUFDO0lBQ3hDLENBQUMsQ0FBQzs7SUFHRixTQUFTSyxRQUFRQSxDQUFDQyxHQUFHLEVBQUU7TUFDckIsSUFBSUMsS0FBSyxHQUFHLElBQUl6QyxHQUFHLENBQUMsQ0FBQztNQUNyQndDLEdBQUcsQ0FBQ0UsT0FBTyxDQUFDLFVBQVVDLEtBQUssRUFBRUMsR0FBRyxFQUFFO1FBQ2hDSCxLQUFLLENBQUNJLEdBQUcsQ0FBQ0QsR0FBRyxFQUFFRCxLQUFLLENBQUM7TUFDdkIsQ0FBQyxDQUFDO01BQ0YsT0FBT0YsS0FBSztJQUNkO0lBRUEsU0FBU0ssUUFBUUEsQ0FBQ0QsR0FBRyxFQUFFO01BQ3JCLElBQUlKLEtBQUssR0FBRyxJQUFJaEMsR0FBRyxDQUFDLENBQUM7TUFDckJvQyxHQUFHLENBQUNILE9BQU8sQ0FBQyxVQUFVQyxLQUFLLEVBQUU7UUFDM0JGLEtBQUssQ0FBQ00sR0FBRyxDQUFDSixLQUFLLENBQUM7TUFDbEIsQ0FBQyxDQUFDO01BQ0YsT0FBT0YsS0FBSztJQUNkLENBQUMsQ0FBQzs7SUFHRixTQUFTTyxXQUFXQSxDQUFDQyxNQUFNLEVBQUVDLFFBQVEsRUFBRTtNQUNyQyxJQUFJO1FBQ0YsT0FBT0QsTUFBTSxDQUFDQyxRQUFRLENBQUM7TUFDekIsQ0FBQyxDQUFDLE9BQU8vQixHQUFHLEVBQUU7UUFDWjtRQUNBLE9BQU9PLFNBQVM7TUFDbEI7SUFDRjtJQUVBLFNBQVN5QixtQkFBbUJBLENBQUEsRUFBRztNQUU3QixJQUFJOUMsY0FBYyxDQUFDaUIsTUFBTSxLQUFLLENBQUMsRUFBRTtRQUMvQixPQUFPLElBQUk7TUFDYjtNQUVBLElBQUlWLG1CQUFtQixFQUFFO1FBQ3ZCLE9BQU8sSUFBSTtNQUNiO01BRUFBLG1CQUFtQixHQUFHLElBQUk7TUFFMUIsSUFBSTtRQUNGLElBQUl3QyxhQUFhLEdBQUcsSUFBSTNDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUk0QyxlQUFlLEdBQUcsSUFBSTVDLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUk2QyxPQUFPLEdBQUdqRCxjQUFjO1FBQzVCQSxjQUFjLEdBQUcsRUFBRTtRQUNuQmlELE9BQU8sQ0FBQ1osT0FBTyxDQUFDLFVBQVVhLElBQUksRUFBRTtVQUM5QixJQUFJQyxNQUFNLEdBQUdELElBQUksQ0FBQyxDQUFDLENBQUM7WUFDaEJ6QixRQUFRLEdBQUd5QixJQUFJLENBQUMsQ0FBQyxDQUFDO1VBQ3RCO1VBQ0E7VUFDQSxJQUFJMUIsUUFBUSxHQUFHMkIsTUFBTSxDQUFDQyxPQUFPO1VBQzdCckQscUJBQXFCLENBQUN5QyxHQUFHLENBQUNoQixRQUFRLEVBQUUyQixNQUFNLENBQUM7VUFDM0NwRCxxQkFBcUIsQ0FBQ3lDLEdBQUcsQ0FBQ2YsUUFBUSxFQUFFMEIsTUFBTSxDQUFDO1VBQzNDQSxNQUFNLENBQUNDLE9BQU8sR0FBRzNCLFFBQVEsQ0FBQyxDQUFDOztVQUUzQixJQUFJTyx1QkFBdUIsQ0FBQ1IsUUFBUSxFQUFFQyxRQUFRLENBQUMsRUFBRTtZQUMvQ3VCLGVBQWUsQ0FBQ04sR0FBRyxDQUFDUyxNQUFNLENBQUM7VUFDN0IsQ0FBQyxNQUFNO1lBQ0xKLGFBQWEsQ0FBQ0wsR0FBRyxDQUFDUyxNQUFNLENBQUM7VUFDM0I7UUFDRixDQUFDLENBQUMsQ0FBQyxDQUFDOztRQUVKLElBQUlFLE1BQU0sR0FBRztVQUNYTCxlQUFlLEVBQUVBLGVBQWU7VUFDaEM7VUFDQUQsYUFBYSxFQUFFQSxhQUFhLENBQUM7UUFFL0IsQ0FBQztRQUNEOUMsbUJBQW1CLENBQUNvQyxPQUFPLENBQUMsVUFBVWlCLE9BQU8sRUFBRTtVQUM3QztVQUNBO1VBQ0FBLE9BQU8sQ0FBQ0MsaUJBQWlCLENBQUN0QixhQUFhLENBQUM7UUFDMUMsQ0FBQyxDQUFDO1FBQ0YsSUFBSXVCLFFBQVEsR0FBRyxLQUFLO1FBQ3BCLElBQUlDLFVBQVUsR0FBRyxJQUFJLENBQUMsQ0FBQztRQUN2QjtRQUNBO1FBQ0E7O1FBRUEsSUFBSUMsbUJBQW1CLEdBQUdqQixRQUFRLENBQUNwQyxXQUFXLENBQUM7UUFDL0MsSUFBSXNELG9CQUFvQixHQUFHbEIsUUFBUSxDQUFDdEMsWUFBWSxDQUFDO1FBQ2pELElBQUl5RCxxQkFBcUIsR0FBRzFCLFFBQVEsQ0FBQ2hDLGFBQWEsQ0FBQztRQUNuRHdELG1CQUFtQixDQUFDckIsT0FBTyxDQUFDLFVBQVV3QixJQUFJLEVBQUU7VUFDMUMsSUFBSVAsT0FBTyxHQUFHTSxxQkFBcUIsQ0FBQ3hDLEdBQUcsQ0FBQ3lDLElBQUksQ0FBQztVQUU3QyxJQUFJUCxPQUFPLEtBQUtqQyxTQUFTLEVBQUU7WUFDekIsTUFBTSxJQUFJeUMsS0FBSyxDQUFDLG9FQUFvRSxDQUFDO1VBQ3ZGO1VBRUEsSUFBSSxDQUFDekQsV0FBVyxDQUFDMEQsR0FBRyxDQUFDRixJQUFJLENBQUMsRUFBRSxDQUFDO1VBQUE7VUFHN0IsSUFBSXZELFlBQVksS0FBSyxJQUFJLEVBQUU7WUFDekI7VUFDRjtVQUVBLElBQUksQ0FBQ0EsWUFBWSxDQUFDeUQsR0FBRyxDQUFDRixJQUFJLENBQUMsRUFBRTtZQUMzQjtVQUNGO1VBRUEsSUFBSUcsT0FBTyxHQUFHMUQsWUFBWSxDQUFDYyxHQUFHLENBQUN5QyxJQUFJLENBQUM7VUFFcEMsSUFBSTtZQUNGUCxPQUFPLENBQUNXLFlBQVksQ0FBQ0osSUFBSSxFQUFFRyxPQUFPLENBQUM7VUFDckMsQ0FBQyxDQUFDLE9BQU9sRCxHQUFHLEVBQUU7WUFDWixJQUFJLENBQUMwQyxRQUFRLEVBQUU7Y0FDYkEsUUFBUSxHQUFHLElBQUk7Y0FDZkMsVUFBVSxHQUFHM0MsR0FBRztZQUNsQixDQUFDLENBQUM7VUFFSjtRQUNGLENBQUMsQ0FBQztRQUNGNkMsb0JBQW9CLENBQUN0QixPQUFPLENBQUMsVUFBVXdCLElBQUksRUFBRTtVQUMzQyxJQUFJUCxPQUFPLEdBQUdNLHFCQUFxQixDQUFDeEMsR0FBRyxDQUFDeUMsSUFBSSxDQUFDO1VBRTdDLElBQUlQLE9BQU8sS0FBS2pDLFNBQVMsRUFBRTtZQUN6QixNQUFNLElBQUl5QyxLQUFLLENBQUMsb0VBQW9FLENBQUM7VUFDdkY7VUFFQSxJQUFJLENBQUMzRCxZQUFZLENBQUM0RCxHQUFHLENBQUNGLElBQUksQ0FBQyxFQUFFLENBQUM7VUFBQTtVQUc5QixJQUFJO1lBQ0ZQLE9BQU8sQ0FBQ1ksZUFBZSxDQUFDTCxJQUFJLEVBQUVSLE1BQU0sQ0FBQztVQUN2QyxDQUFDLENBQUMsT0FBT3ZDLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQzBDLFFBQVEsRUFBRTtjQUNiQSxRQUFRLEdBQUcsSUFBSTtjQUNmQyxVQUFVLEdBQUczQyxHQUFHO1lBQ2xCLENBQUMsQ0FBQztVQUVKO1FBQ0YsQ0FBQyxDQUFDO1FBRUYsSUFBSTBDLFFBQVEsRUFBRTtVQUNaLE1BQU1DLFVBQVU7UUFDbEI7UUFFQSxPQUFPSixNQUFNO01BQ2YsQ0FBQyxTQUFTO1FBQ1I5QyxtQkFBbUIsR0FBRyxLQUFLO01BQzdCO0lBQ0Y7SUFDQSxTQUFTNEQsUUFBUUEsQ0FBQ3RDLElBQUksRUFBRXVDLEVBQUUsRUFBRTtNQUMxQjtRQUNFLElBQUl2QyxJQUFJLEtBQUssSUFBSSxFQUFFO1VBQ2pCO1FBQ0Y7UUFFQSxJQUFJLE9BQU9BLElBQUksS0FBSyxVQUFVLElBQUksT0FBT0EsSUFBSSxLQUFLLFFBQVEsRUFBRTtVQUMxRDtRQUNGLENBQUMsQ0FBQztRQUNGO1FBQ0E7O1FBR0EsSUFBSWhDLGlCQUFpQixDQUFDa0UsR0FBRyxDQUFDbEMsSUFBSSxDQUFDLEVBQUU7VUFDL0I7UUFDRixDQUFDLENBQUM7UUFDRjtRQUNBOztRQUdBLElBQUlzQixNQUFNLEdBQUd2RCxlQUFlLENBQUN3QixHQUFHLENBQUNnRCxFQUFFLENBQUM7UUFFcEMsSUFBSWpCLE1BQU0sS0FBSzlCLFNBQVMsRUFBRTtVQUN4QjhCLE1BQU0sR0FBRztZQUNQQyxPQUFPLEVBQUV2QjtVQUNYLENBQUM7VUFDRGpDLGVBQWUsQ0FBQzRDLEdBQUcsQ0FBQzRCLEVBQUUsRUFBRWpCLE1BQU0sQ0FBQztRQUNqQyxDQUFDLE1BQU07VUFDTG5ELGNBQWMsQ0FBQ3FFLElBQUksQ0FBQyxDQUFDbEIsTUFBTSxFQUFFdEIsSUFBSSxDQUFDLENBQUM7UUFDckM7UUFFQWhDLGlCQUFpQixDQUFDMkMsR0FBRyxDQUFDWCxJQUFJLEVBQUVzQixNQUFNLENBQUMsQ0FBQyxDQUFDOztRQUVyQyxJQUFJLE9BQU90QixJQUFJLEtBQUssUUFBUSxJQUFJQSxJQUFJLEtBQUssSUFBSSxFQUFFO1VBQzdDLFFBQVFjLFdBQVcsQ0FBQ2QsSUFBSSxFQUFFLFVBQVUsQ0FBQztZQUNuQyxLQUFLdkMsc0JBQXNCO2NBQ3pCNkUsUUFBUSxDQUFDdEMsSUFBSSxDQUFDeUMsTUFBTSxFQUFFRixFQUFFLEdBQUcsU0FBUyxDQUFDO2NBQ3JDO1lBRUYsS0FBSzVFLGVBQWU7Y0FDbEIyRSxRQUFRLENBQUN0QyxJQUFJLENBQUNBLElBQUksRUFBRXVDLEVBQUUsR0FBRyxPQUFPLENBQUM7Y0FDakM7VUFDSjtRQUNGO01BQ0Y7SUFDRjtJQUNBLFNBQVNHLFlBQVlBLENBQUMxQyxJQUFJLEVBQUVVLEdBQUcsRUFBRTtNQUMvQixJQUFJeEIsVUFBVSxHQUFHeUQsU0FBUyxDQUFDdkQsTUFBTSxHQUFHLENBQUMsSUFBSXVELFNBQVMsQ0FBQyxDQUFDLENBQUMsS0FBS25ELFNBQVMsR0FBR21ELFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxLQUFLO01BQzFGLElBQUkzRCxjQUFjLEdBQUcyRCxTQUFTLENBQUN2RCxNQUFNLEdBQUcsQ0FBQyxHQUFHdUQsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHbkQsU0FBUztNQUVwRTtRQUNFLElBQUksQ0FBQ3ZCLG1CQUFtQixDQUFDaUUsR0FBRyxDQUFDbEMsSUFBSSxDQUFDLEVBQUU7VUFDbEMvQixtQkFBbUIsQ0FBQzBDLEdBQUcsQ0FBQ1gsSUFBSSxFQUFFO1lBQzVCZCxVQUFVLEVBQUVBLFVBQVU7WUFDdEJKLE1BQU0sRUFBRTRCLEdBQUc7WUFDWDdCLE9BQU8sRUFBRSxJQUFJO1lBQ2JHLGNBQWMsRUFBRUEsY0FBYyxJQUFJLFlBQVk7Y0FDNUMsT0FBTyxFQUFFO1lBQ1g7VUFDRixDQUFDLENBQUM7UUFDSixDQUFDLENBQUM7O1FBR0YsSUFBSSxPQUFPZ0IsSUFBSSxLQUFLLFFBQVEsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRTtVQUM3QyxRQUFRYyxXQUFXLENBQUNkLElBQUksRUFBRSxVQUFVLENBQUM7WUFDbkMsS0FBS3ZDLHNCQUFzQjtjQUN6QmlGLFlBQVksQ0FBQzFDLElBQUksQ0FBQ3lDLE1BQU0sRUFBRS9CLEdBQUcsRUFBRXhCLFVBQVUsRUFBRUYsY0FBYyxDQUFDO2NBQzFEO1lBRUYsS0FBS3JCLGVBQWU7Y0FDbEIrRSxZQUFZLENBQUMxQyxJQUFJLENBQUNBLElBQUksRUFBRVUsR0FBRyxFQUFFeEIsVUFBVSxFQUFFRixjQUFjLENBQUM7Y0FDeEQ7VUFDSjtRQUNGO01BQ0Y7SUFDRixDQUFDLENBQUM7SUFDRjs7SUFFQSxTQUFTNEQsOEJBQThCQSxDQUFDNUMsSUFBSSxFQUFFO01BQzVDO1FBQ0UsSUFBSXBCLFNBQVMsR0FBR1gsbUJBQW1CLENBQUNzQixHQUFHLENBQUNTLElBQUksQ0FBQztRQUU3QyxJQUFJcEIsU0FBUyxLQUFLWSxTQUFTLEVBQUU7VUFDM0JiLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDO1FBQzNCO01BQ0Y7SUFDRjtJQUNBLFNBQVNpRSxhQUFhQSxDQUFDTixFQUFFLEVBQUU7TUFDekI7UUFDRSxPQUFPeEUsZUFBZSxDQUFDd0IsR0FBRyxDQUFDZ0QsRUFBRSxDQUFDO01BQ2hDO0lBQ0Y7SUFDQSxTQUFTTyxlQUFlQSxDQUFDOUMsSUFBSSxFQUFFO01BQzdCO1FBQ0UsT0FBT2hDLGlCQUFpQixDQUFDdUIsR0FBRyxDQUFDUyxJQUFJLENBQUM7TUFDcEM7SUFDRjtJQUNBLFNBQVMrQyx5QkFBeUJBLENBQUNDLFFBQVEsRUFBRTtNQUMzQztRQUNFLElBQUlDLGlCQUFpQixHQUFHLElBQUkxRSxHQUFHLENBQUMsQ0FBQztRQUNqQ0QsWUFBWSxDQUFDa0MsT0FBTyxDQUFDLFVBQVV3QixJQUFJLEVBQUU7VUFDbkMsSUFBSVAsT0FBTyxHQUFHcEQsYUFBYSxDQUFDa0IsR0FBRyxDQUFDeUMsSUFBSSxDQUFDO1VBRXJDLElBQUlQLE9BQU8sS0FBS2pDLFNBQVMsRUFBRTtZQUN6QixNQUFNLElBQUl5QyxLQUFLLENBQUMsb0VBQW9FLENBQUM7VUFDdkY7VUFFQSxJQUFJaUIsZ0JBQWdCLEdBQUd6QixPQUFPLENBQUMwQiwyQkFBMkIsQ0FBQ25CLElBQUksRUFBRWdCLFFBQVEsQ0FBQztVQUMxRUUsZ0JBQWdCLENBQUMxQyxPQUFPLENBQUMsVUFBVTRDLElBQUksRUFBRTtZQUN2Q0gsaUJBQWlCLENBQUNwQyxHQUFHLENBQUN1QyxJQUFJLENBQUM7VUFDN0IsQ0FBQyxDQUFDO1FBQ0osQ0FBQyxDQUFDO1FBQ0YsT0FBT0gsaUJBQWlCO01BQzFCO0lBQ0Y7SUFDQSxTQUFTSSxvQkFBb0JBLENBQUNDLFlBQVksRUFBRTtNQUMxQztRQUNFO1FBQ0E7UUFDQTtRQUNBO1FBQ0EsSUFBSWpFLElBQUksR0FBR2lFLFlBQVksQ0FBQ0MsOEJBQThCO1FBRXRELElBQUlsRSxJQUFJLEtBQUtHLFNBQVMsRUFBRTtVQUN0QjtVQUNBO1VBQ0E7VUFDQSxJQUFJZ0UsTUFBTSxHQUFHLENBQUM7VUFDZEYsWUFBWSxDQUFDQyw4QkFBOEIsR0FBR2xFLElBQUksR0FBRztZQUNuRG9FLFNBQVMsRUFBRSxJQUFJM0YsR0FBRyxDQUFDLENBQUM7WUFDcEI0RixhQUFhLEVBQUUsSUFBSTtZQUNuQkMsTUFBTSxFQUFFLFNBQUFBLE9BQVVDLFFBQVEsRUFBRTtjQUMxQixPQUFPSixNQUFNLEVBQUU7WUFDakIsQ0FBQztZQUNESyxtQkFBbUIsRUFBRSxTQUFBQSxvQkFBVXRCLEVBQUUsRUFBRVAsSUFBSSxFQUFFOEIsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUNyREMsaUJBQWlCLEVBQUUsU0FBQUEsa0JBQVV4QixFQUFFLEVBQUVQLElBQUksRUFBRWdDLGtCQUFrQixFQUFFckMsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUN2RXNDLG9CQUFvQixFQUFFLFNBQUFBLHFCQUFBLEVBQVksQ0FBQztVQUNyQyxDQUFDO1FBQ0g7UUFFQSxJQUFJNUUsSUFBSSxDQUFDNkUsVUFBVSxFQUFFO1VBQ25CO1VBQ0E7VUFDQTtVQUNBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMseUZBQXlGLEdBQUcscUVBQXFFLENBQUM7VUFDbEw7UUFDRixDQUFDLENBQUM7O1FBR0YsSUFBSUMsU0FBUyxHQUFHL0UsSUFBSSxDQUFDc0UsTUFBTTtRQUUzQnRFLElBQUksQ0FBQ3NFLE1BQU0sR0FBRyxVQUFVQyxRQUFRLEVBQUU7VUFDaEMsSUFBSXJCLEVBQUUsR0FBRzZCLFNBQVMsQ0FBQ0MsS0FBSyxDQUFDLElBQUksRUFBRTFCLFNBQVMsQ0FBQztVQUV6QyxJQUFJLE9BQU9pQixRQUFRLENBQUN2QixlQUFlLEtBQUssVUFBVSxJQUFJLE9BQU91QixRQUFRLENBQUNsQyxpQkFBaUIsS0FBSyxVQUFVLEVBQUU7WUFDdEc7WUFDQXRELG1CQUFtQixDQUFDdUMsR0FBRyxDQUFDNEIsRUFBRSxFQUFFcUIsUUFBUSxDQUFDO1VBQ3ZDO1VBRUEsT0FBT3JCLEVBQUU7UUFDWCxDQUFDLENBQUMsQ0FBQztRQUNIO1FBQ0E7O1FBR0FsRCxJQUFJLENBQUNvRSxTQUFTLENBQUNqRCxPQUFPLENBQUMsVUFBVW9ELFFBQVEsRUFBRXJCLEVBQUUsRUFBRTtVQUM3QyxJQUFJLE9BQU9xQixRQUFRLENBQUN2QixlQUFlLEtBQUssVUFBVSxJQUFJLE9BQU91QixRQUFRLENBQUNsQyxpQkFBaUIsS0FBSyxVQUFVLEVBQUU7WUFDdEc7WUFDQXRELG1CQUFtQixDQUFDdUMsR0FBRyxDQUFDNEIsRUFBRSxFQUFFcUIsUUFBUSxDQUFDO1VBQ3ZDO1FBQ0YsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7UUFFSixJQUFJVSxvQkFBb0IsR0FBR2pGLElBQUksQ0FBQzBFLGlCQUFpQjtRQUVqRCxJQUFJUSxzQkFBc0IsR0FBR2xGLElBQUksQ0FBQ3dFLG1CQUFtQixJQUFJLFlBQVksQ0FBQyxDQUFDO1FBRXZFeEUsSUFBSSxDQUFDd0UsbUJBQW1CLEdBQUcsVUFBVXRCLEVBQUUsRUFBRVAsSUFBSSxFQUFFOEIsUUFBUSxFQUFFO1VBQ3ZELElBQUksQ0FBQ3BGLG1CQUFtQixFQUFFO1lBQ3hCO1lBQ0E7WUFDQUYsV0FBVyxVQUFPLENBQUN3RCxJQUFJLENBQUM7WUFFeEIsSUFBSXZELFlBQVksS0FBSyxJQUFJLEVBQUU7Y0FDekJBLFlBQVksQ0FBQ2tDLEdBQUcsQ0FBQ3FCLElBQUksRUFBRThCLFFBQVEsQ0FBQztZQUNsQztVQUNGO1VBRUEsT0FBT1Msc0JBQXNCLENBQUNGLEtBQUssQ0FBQyxJQUFJLEVBQUUxQixTQUFTLENBQUM7UUFDdEQsQ0FBQztRQUVEdEQsSUFBSSxDQUFDMEUsaUJBQWlCLEdBQUcsVUFBVXhCLEVBQUUsRUFBRVAsSUFBSSxFQUFFZ0Msa0JBQWtCLEVBQUVyQyxRQUFRLEVBQUU7VUFDekUsSUFBSUYsT0FBTyxHQUFHckQsbUJBQW1CLENBQUNtQixHQUFHLENBQUNnRCxFQUFFLENBQUM7VUFFekMsSUFBSWQsT0FBTyxLQUFLakMsU0FBUyxFQUFFO1lBQ3pCbkIsYUFBYSxDQUFDc0MsR0FBRyxDQUFDcUIsSUFBSSxFQUFFUCxPQUFPLENBQUM7WUFDaEMsSUFBSUYsT0FBTyxHQUFHUyxJQUFJLENBQUNULE9BQU87WUFDMUIsSUFBSWlELFNBQVMsR0FBR2pELE9BQU8sQ0FBQ2lELFNBQVMsQ0FBQyxDQUFDO1lBQ25DO1lBQ0E7O1lBRUEsSUFBSUEsU0FBUyxLQUFLLElBQUksRUFBRTtjQUN0QixJQUFJQyxVQUFVLEdBQUdELFNBQVMsQ0FBQ0UsYUFBYSxJQUFJLElBQUksSUFBSUYsU0FBUyxDQUFDRSxhQUFhLENBQUN2QyxPQUFPLElBQUksSUFBSSxJQUFJN0QsWUFBWSxDQUFDNEQsR0FBRyxDQUFDRixJQUFJLENBQUM7Y0FDckgsSUFBSTJDLFNBQVMsR0FBR3BELE9BQU8sQ0FBQ21ELGFBQWEsSUFBSSxJQUFJLElBQUluRCxPQUFPLENBQUNtRCxhQUFhLENBQUN2QyxPQUFPLElBQUksSUFBSTtjQUV0RixJQUFJLENBQUNzQyxVQUFVLElBQUlFLFNBQVMsRUFBRTtnQkFDNUI7Z0JBQ0FyRyxZQUFZLENBQUN1QyxHQUFHLENBQUNtQixJQUFJLENBQUM7Z0JBQ3RCeEQsV0FBVyxVQUFPLENBQUN3RCxJQUFJLENBQUM7Y0FDMUIsQ0FBQyxNQUFNLElBQUl5QyxVQUFVLElBQUlFLFNBQVMsRUFBRSxDQUFDLEtBQU0sSUFBSUYsVUFBVSxJQUFJLENBQUNFLFNBQVMsRUFBRTtnQkFDdkU7Z0JBQ0FyRyxZQUFZLFVBQU8sQ0FBQzBELElBQUksQ0FBQztnQkFFekIsSUFBSUwsUUFBUSxFQUFFO2tCQUNaO2tCQUNBbkQsV0FBVyxDQUFDcUMsR0FBRyxDQUFDbUIsSUFBSSxDQUFDO2dCQUN2QixDQUFDLE1BQU07a0JBQ0wzRCxhQUFhLFVBQU8sQ0FBQzJELElBQUksQ0FBQztnQkFDNUI7Y0FDRixDQUFDLE1BQU0sSUFBSSxDQUFDeUMsVUFBVSxJQUFJLENBQUNFLFNBQVMsRUFBRTtnQkFDcEMsSUFBSWhELFFBQVEsRUFBRTtrQkFDWjtrQkFDQW5ELFdBQVcsQ0FBQ3FDLEdBQUcsQ0FBQ21CLElBQUksQ0FBQztnQkFDdkI7Y0FDRjtZQUNGLENBQUMsTUFBTTtjQUNMO2NBQ0ExRCxZQUFZLENBQUN1QyxHQUFHLENBQUNtQixJQUFJLENBQUM7WUFDeEI7VUFDRixDQUFDLENBQUM7O1VBR0YsT0FBT3NDLG9CQUFvQixDQUFDRCxLQUFLLENBQUMsSUFBSSxFQUFFMUIsU0FBUyxDQUFDO1FBQ3BELENBQUM7TUFDSDtJQUNGO0lBQ0EsU0FBU2lDLHNCQUFzQkEsQ0FBQSxFQUFHO01BQ2hDO01BQ0EsT0FBTyxLQUFLO0lBQ2QsQ0FBQyxDQUFDOztJQUVGLFNBQVNDLG9CQUFvQkEsQ0FBQSxFQUFHO01BQzlCO1FBQ0UsT0FBT3ZHLFlBQVksQ0FBQ3dHLElBQUk7TUFDMUI7SUFDRixDQUFDLENBQUM7SUFDRjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7O0lBRUEsU0FBU0MsbUNBQW1DQSxDQUFBLEVBQUc7TUFDN0M7UUFDRSxJQUFJQyxTQUFTO1FBQ2IsSUFBSUMsY0FBYztRQUNsQixJQUFJQyxlQUFlLEdBQUcsS0FBSztRQUMzQixPQUFPLFVBQVVsRixJQUFJLEVBQUVVLEdBQUcsRUFBRXhCLFVBQVUsRUFBRUYsY0FBYyxFQUFFO1VBQ3RELElBQUksT0FBTzBCLEdBQUcsS0FBSyxRQUFRLEVBQUU7WUFDM0I7WUFDQTtZQUNBO1lBQ0EsSUFBSSxDQUFDc0UsU0FBUyxFQUFFO2NBQ2Q7Y0FDQUEsU0FBUyxHQUFHaEYsSUFBSTtjQUNoQmlGLGNBQWMsR0FBRyxPQUFPakcsY0FBYyxLQUFLLFVBQVU7WUFDdkQsQ0FBQyxDQUFDO1lBQ0Y7WUFDQTs7WUFHQSxJQUFJZ0IsSUFBSSxJQUFJLElBQUksS0FBSyxPQUFPQSxJQUFJLEtBQUssVUFBVSxJQUFJLE9BQU9BLElBQUksS0FBSyxRQUFRLENBQUMsRUFBRTtjQUM1RTBDLFlBQVksQ0FBQzFDLElBQUksRUFBRVUsR0FBRyxFQUFFeEIsVUFBVSxFQUFFRixjQUFjLENBQUM7WUFDckQ7WUFFQSxPQUFPZ0IsSUFBSTtVQUNiLENBQUMsTUFBTTtZQUNMO1lBQ0E7WUFDQTtZQUNBLElBQUksQ0FBQ2tGLGVBQWUsSUFBSUQsY0FBYyxFQUFFO2NBQ3RDQyxlQUFlLEdBQUcsSUFBSTtjQUN0QnRDLDhCQUE4QixDQUFDb0MsU0FBUyxDQUFDO1lBQzNDO1VBQ0Y7UUFDRixDQUFDO01BQ0g7SUFDRjtJQUNBLFNBQVNHLHFCQUFxQkEsQ0FBQ25GLElBQUksRUFBRTtNQUNuQztRQUNFLFFBQVEsT0FBT0EsSUFBSTtVQUNqQixLQUFLLFVBQVU7WUFDYjtjQUNFO2NBQ0EsSUFBSUEsSUFBSSxDQUFDQyxTQUFTLElBQUksSUFBSSxFQUFFO2dCQUMxQixJQUFJRCxJQUFJLENBQUNDLFNBQVMsQ0FBQ0MsZ0JBQWdCLEVBQUU7a0JBQ25DO2tCQUNBLE9BQU8sSUFBSTtnQkFDYjtnQkFFQSxJQUFJa0YsUUFBUSxHQUFHQyxNQUFNLENBQUNDLG1CQUFtQixDQUFDdEYsSUFBSSxDQUFDQyxTQUFTLENBQUM7Z0JBRXpELElBQUltRixRQUFRLENBQUNoRyxNQUFNLEdBQUcsQ0FBQyxJQUFJZ0csUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLGFBQWEsRUFBRTtrQkFDeEQ7a0JBQ0EsT0FBTyxLQUFLO2dCQUNkLENBQUMsQ0FBQzs7Z0JBR0YsSUFBSXBGLElBQUksQ0FBQ0MsU0FBUyxDQUFDc0YsU0FBUyxLQUFLRixNQUFNLENBQUNwRixTQUFTLEVBQUU7a0JBQ2pEO2tCQUNBLE9BQU8sS0FBSztnQkFDZCxDQUFDLENBQUM7Z0JBQ0Y7Y0FFRixDQUFDLENBQUM7O2NBR0YsSUFBSXVGLElBQUksR0FBR3hGLElBQUksQ0FBQ3dGLElBQUksSUFBSXhGLElBQUksQ0FBQ3lGLFdBQVc7Y0FDeEMsT0FBTyxPQUFPRCxJQUFJLEtBQUssUUFBUSxJQUFJLFFBQVEsQ0FBQ0UsSUFBSSxDQUFDRixJQUFJLENBQUM7WUFDeEQ7VUFFRixLQUFLLFFBQVE7WUFDWDtjQUNFLElBQUl4RixJQUFJLElBQUksSUFBSSxFQUFFO2dCQUNoQixRQUFRYyxXQUFXLENBQUNkLElBQUksRUFBRSxVQUFVLENBQUM7a0JBQ25DLEtBQUt2QyxzQkFBc0I7a0JBQzNCLEtBQUtFLGVBQWU7b0JBQ2xCO29CQUNBLE9BQU8sSUFBSTtrQkFFYjtvQkFDRSxPQUFPLEtBQUs7Z0JBQ2hCO2NBQ0Y7Y0FFQSxPQUFPLEtBQUs7WUFDZDtVQUVGO1lBQ0U7Y0FDRSxPQUFPLEtBQUs7WUFDZDtRQUNKO01BQ0Y7SUFDRjtJQUVBZ0ksNEJBQTRCLEdBQUdkLG9CQUFvQjtJQUNuRGMsc0NBQXNDLEdBQUcvQyw4QkFBOEI7SUFDdkUrQywyQ0FBMkMsR0FBR1osbUNBQW1DO0lBQ2pGWSxpQ0FBaUMsR0FBRzVDLHlCQUF5QjtJQUM3RDRDLHFCQUFxQixHQUFHOUMsYUFBYTtJQUNyQzhDLHVCQUF1QixHQUFHN0MsZUFBZTtJQUN6QzZDLDhCQUE4QixHQUFHZixzQkFBc0I7SUFDdkRlLDRCQUE0QixHQUFHdEMsb0JBQW9CO0lBQ25Ec0MsNkJBQTZCLEdBQUdSLHFCQUFxQjtJQUNyRFEsMkJBQTJCLEdBQUcxRSxtQkFBbUI7SUFDakQwRSxnQkFBZ0IsR0FBR3JELFFBQVE7SUFDM0JxRCxvQkFBb0IsR0FBR2pELFlBQVk7RUFDakMsQ0FBQyxFQUFFLENBQUM7QUFDTiIsInNvdXJjZXMiOlsiRjpcXFVBRSBQUk9KRUNUU1xcRFVCQUlfUFJPSkVDVFxcMjdtYXJjaF9ibG9nX2xpc3Rpbmdfc2l0ZW1hcF9kb25lXFwyNG1hcmNodmVyY2VscHVzaGVkX3dvcmtpbmdfZG9uZVxcbm9kZV9tb2R1bGVzXFxuZXh0XFxkaXN0XFxjb21waWxlZFxccmVhY3QtcmVmcmVzaFxcY2pzXFxyZWFjdC1yZWZyZXNoLXJ1bnRpbWUuZGV2ZWxvcG1lbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBSZWFjdFxuICogcmVhY3QtcmVmcmVzaC1ydW50aW1lLmRldmVsb3BtZW50LmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIChmdW5jdGlvbigpIHtcbid1c2Ugc3RyaWN0JztcblxuLy8gQVRURU5USU9OXG52YXIgUkVBQ1RfRk9SV0FSRF9SRUZfVFlQRSA9IFN5bWJvbC5mb3IoJ3JlYWN0LmZvcndhcmRfcmVmJyk7XG52YXIgUkVBQ1RfTUVNT19UWVBFID0gU3ltYm9sLmZvcigncmVhY3QubWVtbycpO1xuXG52YXIgUG9zc2libHlXZWFrTWFwID0gdHlwZW9mIFdlYWtNYXAgPT09ICdmdW5jdGlvbicgPyBXZWFrTWFwIDogTWFwOyAvLyBXZSBuZXZlciByZW1vdmUgdGhlc2UgYXNzb2NpYXRpb25zLlxuLy8gSXQncyBPSyB0byByZWZlcmVuY2UgZmFtaWxpZXMsIGJ1dCB1c2UgV2Vha01hcC9TZXQgZm9yIHR5cGVzLlxuXG52YXIgYWxsRmFtaWxpZXNCeUlEID0gbmV3IE1hcCgpO1xudmFyIGFsbEZhbWlsaWVzQnlUeXBlID0gbmV3IFBvc3NpYmx5V2Vha01hcCgpO1xudmFyIGFsbFNpZ25hdHVyZXNCeVR5cGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7IC8vIFRoaXMgV2Vha01hcCBpcyByZWFkIGJ5IFJlYWN0LCBzbyB3ZSBvbmx5IHB1dCBmYW1pbGllc1xuLy8gdGhhdCBoYXZlIGFjdHVhbGx5IGJlZW4gZWRpdGVkIGhlcmUuIFRoaXMga2VlcHMgY2hlY2tzIGZhc3QuXG4vLyAkRmxvd0lzc3VlXG5cbnZhciB1cGRhdGVkRmFtaWxpZXNCeVR5cGUgPSBuZXcgUG9zc2libHlXZWFrTWFwKCk7IC8vIFRoaXMgaXMgY2xlYXJlZCBvbiBldmVyeSBwZXJmb3JtUmVhY3RSZWZyZXNoKCkgY2FsbC5cbi8vIEl0IGlzIGFuIGFycmF5IG9mIFtGYW1pbHksIE5leHRUeXBlXSB0dXBsZXMuXG5cbnZhciBwZW5kaW5nVXBkYXRlcyA9IFtdOyAvLyBUaGlzIGlzIGluamVjdGVkIGJ5IHRoZSByZW5kZXJlciB2aWEgRGV2VG9vbHMgZ2xvYmFsIGhvb2suXG5cbnZhciBoZWxwZXJzQnlSZW5kZXJlcklEID0gbmV3IE1hcCgpO1xudmFyIGhlbHBlcnNCeVJvb3QgPSBuZXcgTWFwKCk7IC8vIFdlIGtlZXAgdHJhY2sgb2YgbW91bnRlZCByb290cyBzbyB3ZSBjYW4gc2NoZWR1bGUgdXBkYXRlcy5cblxudmFyIG1vdW50ZWRSb290cyA9IG5ldyBTZXQoKTsgLy8gSWYgYSByb290IGNhcHR1cmVzIGFuIGVycm9yLCB3ZSByZW1lbWJlciBpdCBzbyB3ZSBjYW4gcmV0cnkgb24gZWRpdC5cblxudmFyIGZhaWxlZFJvb3RzID0gbmV3IFNldCgpOyAvLyBJbiBlbnZpcm9ubWVudHMgdGhhdCBzdXBwb3J0IFdlYWtNYXAsIHdlIGFsc28gcmVtZW1iZXIgdGhlIGxhc3QgZWxlbWVudCBmb3IgZXZlcnkgcm9vdC5cbi8vIEl0IG5lZWRzIHRvIGJlIHdlYWsgYmVjYXVzZSB3ZSBkbyB0aGlzIGV2ZW4gZm9yIHJvb3RzIHRoYXQgZmFpbGVkIHRvIG1vdW50LlxuLy8gSWYgdGhlcmUgaXMgbm8gV2Vha01hcCwgd2Ugd29uJ3QgYXR0ZW1wdCB0byBkbyByZXRyeWluZy5cbi8vICRGbG93SXNzdWVcblxudmFyIHJvb3RFbGVtZW50cyA9IC8vICRGbG93SXNzdWVcbnR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nID8gbmV3IFdlYWtNYXAoKSA6IG51bGw7XG52YXIgaXNQZXJmb3JtaW5nUmVmcmVzaCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBjb21wdXRlRnVsbEtleShzaWduYXR1cmUpIHtcbiAgaWYgKHNpZ25hdHVyZS5mdWxsS2V5ICE9PSBudWxsKSB7XG4gICAgcmV0dXJuIHNpZ25hdHVyZS5mdWxsS2V5O1xuICB9XG5cbiAgdmFyIGZ1bGxLZXkgPSBzaWduYXR1cmUub3duS2V5O1xuICB2YXIgaG9va3M7XG5cbiAgdHJ5IHtcbiAgICBob29rcyA9IHNpZ25hdHVyZS5nZXRDdXN0b21Ib29rcygpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gYW4gZWRnZSBjYXNlLCBlLmcuIGlmIGV4cHJlc3Npb24gbGlrZSBGb28udXNlU29tZXRoaW5nXG4gICAgLy8gZGVwZW5kcyBvbiBGb28gd2hpY2ggaXMgbGF6aWx5IGluaXRpYWxpemVkIGR1cmluZyByZW5kZXJpbmcuXG4gICAgLy8gSW4gdGhhdCBjYXNlIGp1c3QgYXNzdW1lIHdlJ2xsIGhhdmUgdG8gcmVtb3VudC5cbiAgICBzaWduYXR1cmUuZm9yY2VSZXNldCA9IHRydWU7XG4gICAgc2lnbmF0dXJlLmZ1bGxLZXkgPSBmdWxsS2V5O1xuICAgIHJldHVybiBmdWxsS2V5O1xuICB9XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBob29rID0gaG9va3NbaV07XG5cbiAgICBpZiAodHlwZW9mIGhvb2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIFNvbWV0aGluZydzIHdyb25nLiBBc3N1bWUgd2UgbmVlZCB0byByZW1vdW50LlxuICAgICAgc2lnbmF0dXJlLmZvcmNlUmVzZXQgPSB0cnVlO1xuICAgICAgc2lnbmF0dXJlLmZ1bGxLZXkgPSBmdWxsS2V5O1xuICAgICAgcmV0dXJuIGZ1bGxLZXk7XG4gICAgfVxuXG4gICAgdmFyIG5lc3RlZEhvb2tTaWduYXR1cmUgPSBhbGxTaWduYXR1cmVzQnlUeXBlLmdldChob29rKTtcblxuICAgIGlmIChuZXN0ZWRIb29rU2lnbmF0dXJlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIE5vIHNpZ25hdHVyZSBtZWFucyBIb29rIHdhc24ndCBpbiB0aGUgc291cmNlIGNvZGUsIGUuZy4gaW4gYSBsaWJyYXJ5LlxuICAgICAgLy8gV2UnbGwgc2tpcCBpdCBiZWNhdXNlIHdlIGNhbiBhc3N1bWUgaXQgd29uJ3QgY2hhbmdlIGR1cmluZyB0aGlzIHNlc3Npb24uXG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICB2YXIgbmVzdGVkSG9va0tleSA9IGNvbXB1dGVGdWxsS2V5KG5lc3RlZEhvb2tTaWduYXR1cmUpO1xuXG4gICAgaWYgKG5lc3RlZEhvb2tTaWduYXR1cmUuZm9yY2VSZXNldCkge1xuICAgICAgc2lnbmF0dXJlLmZvcmNlUmVzZXQgPSB0cnVlO1xuICAgIH1cblxuICAgIGZ1bGxLZXkgKz0gJ1xcbi0tLVxcbicgKyBuZXN0ZWRIb29rS2V5O1xuICB9XG5cbiAgc2lnbmF0dXJlLmZ1bGxLZXkgPSBmdWxsS2V5O1xuICByZXR1cm4gZnVsbEtleTtcbn1cblxuZnVuY3Rpb24gaGF2ZUVxdWFsU2lnbmF0dXJlcyhwcmV2VHlwZSwgbmV4dFR5cGUpIHtcbiAgdmFyIHByZXZTaWduYXR1cmUgPSBhbGxTaWduYXR1cmVzQnlUeXBlLmdldChwcmV2VHlwZSk7XG4gIHZhciBuZXh0U2lnbmF0dXJlID0gYWxsU2lnbmF0dXJlc0J5VHlwZS5nZXQobmV4dFR5cGUpO1xuXG4gIGlmIChwcmV2U2lnbmF0dXJlID09PSB1bmRlZmluZWQgJiYgbmV4dFNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBpZiAocHJldlNpZ25hdHVyZSA9PT0gdW5kZWZpbmVkIHx8IG5leHRTaWduYXR1cmUgPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChjb21wdXRlRnVsbEtleShwcmV2U2lnbmF0dXJlKSAhPT0gY29tcHV0ZUZ1bGxLZXkobmV4dFNpZ25hdHVyZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAobmV4dFNpZ25hdHVyZS5mb3JjZVJlc2V0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIGlzUmVhY3RDbGFzcyh0eXBlKSB7XG4gIHJldHVybiB0eXBlLnByb3RvdHlwZSAmJiB0eXBlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50O1xufVxuXG5mdW5jdGlvbiBjYW5QcmVzZXJ2ZVN0YXRlQmV0d2VlbihwcmV2VHlwZSwgbmV4dFR5cGUpIHtcbiAgaWYgKGlzUmVhY3RDbGFzcyhwcmV2VHlwZSkgfHwgaXNSZWFjdENsYXNzKG5leHRUeXBlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGlmIChoYXZlRXF1YWxTaWduYXR1cmVzKHByZXZUeXBlLCBuZXh0VHlwZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUZhbWlseSh0eXBlKSB7XG4gIC8vIE9ubHkgY2hlY2sgdXBkYXRlZCB0eXBlcyB0byBrZWVwIGxvb2t1cHMgZmFzdC5cbiAgcmV0dXJuIHVwZGF0ZWRGYW1pbGllc0J5VHlwZS5nZXQodHlwZSk7XG59IC8vIElmIHdlIGRpZG4ndCBjYXJlIGFib3V0IElFMTEsIHdlIGNvdWxkIHVzZSBuZXcgTWFwL1NldChpdGVyYWJsZSkuXG5cblxuZnVuY3Rpb24gY2xvbmVNYXAobWFwKSB7XG4gIHZhciBjbG9uZSA9IG5ldyBNYXAoKTtcbiAgbWFwLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICBjbG9uZS5zZXQoa2V5LCB2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gY2xvbmU7XG59XG5cbmZ1bmN0aW9uIGNsb25lU2V0KHNldCkge1xuICB2YXIgY2xvbmUgPSBuZXcgU2V0KCk7XG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIGNsb25lLmFkZCh2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gY2xvbmU7XG59IC8vIFRoaXMgaXMgYSBzYWZldHkgbWVjaGFuaXNtIHRvIHByb3RlY3QgYWdhaW5zdCByb2d1ZSBnZXR0ZXJzIGFuZCBQcm94aWVzLlxuXG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5KG9iamVjdCwgcHJvcGVydHkpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gb2JqZWN0W3Byb3BlcnR5XTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gSW50ZW50aW9uYWxseSBpZ25vcmUuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwZXJmb3JtUmVhY3RSZWZyZXNoKCkge1xuXG4gIGlmIChwZW5kaW5nVXBkYXRlcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmIChpc1BlcmZvcm1pbmdSZWZyZXNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBpc1BlcmZvcm1pbmdSZWZyZXNoID0gdHJ1ZTtcblxuICB0cnkge1xuICAgIHZhciBzdGFsZUZhbWlsaWVzID0gbmV3IFNldCgpO1xuICAgIHZhciB1cGRhdGVkRmFtaWxpZXMgPSBuZXcgU2V0KCk7XG4gICAgdmFyIHVwZGF0ZXMgPSBwZW5kaW5nVXBkYXRlcztcbiAgICBwZW5kaW5nVXBkYXRlcyA9IFtdO1xuICAgIHVwZGF0ZXMuZm9yRWFjaChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgdmFyIGZhbWlseSA9IF9yZWZbMF0sXG4gICAgICAgICAgbmV4dFR5cGUgPSBfcmVmWzFdO1xuICAgICAgLy8gTm93IHRoYXQgd2UgZ290IGEgcmVhbCBlZGl0LCB3ZSBjYW4gY3JlYXRlIGFzc29jaWF0aW9uc1xuICAgICAgLy8gdGhhdCB3aWxsIGJlIHJlYWQgYnkgdGhlIFJlYWN0IHJlY29uY2lsZXIuXG4gICAgICB2YXIgcHJldlR5cGUgPSBmYW1pbHkuY3VycmVudDtcbiAgICAgIHVwZGF0ZWRGYW1pbGllc0J5VHlwZS5zZXQocHJldlR5cGUsIGZhbWlseSk7XG4gICAgICB1cGRhdGVkRmFtaWxpZXNCeVR5cGUuc2V0KG5leHRUeXBlLCBmYW1pbHkpO1xuICAgICAgZmFtaWx5LmN1cnJlbnQgPSBuZXh0VHlwZTsgLy8gRGV0ZXJtaW5lIHdoZXRoZXIgdGhpcyBzaG91bGQgYmUgYSByZS1yZW5kZXIgb3IgYSByZS1tb3VudC5cblxuICAgICAgaWYgKGNhblByZXNlcnZlU3RhdGVCZXR3ZWVuKHByZXZUeXBlLCBuZXh0VHlwZSkpIHtcbiAgICAgICAgdXBkYXRlZEZhbWlsaWVzLmFkZChmYW1pbHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RhbGVGYW1pbGllcy5hZGQoZmFtaWx5KTtcbiAgICAgIH1cbiAgICB9KTsgLy8gVE9ETzogcmVuYW1lIHRoZXNlIGZpZWxkcyB0byBzb21ldGhpbmcgbW9yZSBtZWFuaW5nZnVsLlxuXG4gICAgdmFyIHVwZGF0ZSA9IHtcbiAgICAgIHVwZGF0ZWRGYW1pbGllczogdXBkYXRlZEZhbWlsaWVzLFxuICAgICAgLy8gRmFtaWxpZXMgdGhhdCB3aWxsIHJlLXJlbmRlciBwcmVzZXJ2aW5nIHN0YXRlXG4gICAgICBzdGFsZUZhbWlsaWVzOiBzdGFsZUZhbWlsaWVzIC8vIEZhbWlsaWVzIHRoYXQgd2lsbCBiZSByZW1vdW50ZWRcblxuICAgIH07XG4gICAgaGVscGVyc0J5UmVuZGVyZXJJRC5mb3JFYWNoKGZ1bmN0aW9uIChoZWxwZXJzKSB7XG4gICAgICAvLyBFdmVuIGlmIHRoZXJlIGFyZSBubyByb290cywgc2V0IHRoZSBoYW5kbGVyIG9uIGZpcnN0IHVwZGF0ZS5cbiAgICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0IGlmICpuZXcqIHJvb3RzIGFyZSBtb3VudGVkLCB0aGV5J2xsIHVzZSB0aGUgcmVzb2x2ZSBoYW5kbGVyLlxuICAgICAgaGVscGVycy5zZXRSZWZyZXNoSGFuZGxlcihyZXNvbHZlRmFtaWx5KTtcbiAgICB9KTtcbiAgICB2YXIgZGlkRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgZmlyc3RFcnJvciA9IG51bGw7IC8vIFdlIHNuYXBzaG90IG1hcHMgYW5kIHNldHMgdGhhdCBhcmUgbXV0YXRlZCBkdXJpbmcgY29tbWl0cy5cbiAgICAvLyBJZiB3ZSBkb24ndCBkbyB0aGlzLCB0aGVyZSBpcyBhIHJpc2sgdGhleSB3aWxsIGJlIG11dGF0ZWQgd2hpbGVcbiAgICAvLyB3ZSBpdGVyYXRlIG92ZXIgdGhlbS4gRm9yIGV4YW1wbGUsIHRyeWluZyB0byByZWNvdmVyIGEgZmFpbGVkIHJvb3RcbiAgICAvLyBtYXkgY2F1c2UgYW5vdGhlciByb290IHRvIGJlIGFkZGVkIHRvIHRoZSBmYWlsZWQgbGlzdCAtLSBhbiBpbmZpbml0ZSBsb29wLlxuXG4gICAgdmFyIGZhaWxlZFJvb3RzU25hcHNob3QgPSBjbG9uZVNldChmYWlsZWRSb290cyk7XG4gICAgdmFyIG1vdW50ZWRSb290c1NuYXBzaG90ID0gY2xvbmVTZXQobW91bnRlZFJvb3RzKTtcbiAgICB2YXIgaGVscGVyc0J5Um9vdFNuYXBzaG90ID0gY2xvbmVNYXAoaGVscGVyc0J5Um9vdCk7XG4gICAgZmFpbGVkUm9vdHNTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7XG4gICAgICB2YXIgaGVscGVycyA9IGhlbHBlcnNCeVJvb3RTbmFwc2hvdC5nZXQocm9vdCk7XG5cbiAgICAgIGlmIChoZWxwZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBoZWxwZXJzIGZvciBhIHJvb3QuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QgUmVmcmVzaC4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFmYWlsZWRSb290cy5oYXMocm9vdCkpIHsvLyBObyBsb25nZXIgZmFpbGVkLlxuICAgICAgfVxuXG4gICAgICBpZiAocm9vdEVsZW1lbnRzID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290RWxlbWVudHMuaGFzKHJvb3QpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdmFyIGVsZW1lbnQgPSByb290RWxlbWVudHMuZ2V0KHJvb3QpO1xuXG4gICAgICB0cnkge1xuICAgICAgICBoZWxwZXJzLnNjaGVkdWxlUm9vdChyb290LCBlbGVtZW50KTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBpZiAoIWRpZEVycm9yKSB7XG4gICAgICAgICAgZGlkRXJyb3IgPSB0cnVlO1xuICAgICAgICAgIGZpcnN0RXJyb3IgPSBlcnI7XG4gICAgICAgIH0gLy8gS2VlcCB0cnlpbmcgb3RoZXIgcm9vdHMuXG5cbiAgICAgIH1cbiAgICB9KTtcbiAgICBtb3VudGVkUm9vdHNTbmFwc2hvdC5mb3JFYWNoKGZ1bmN0aW9uIChyb290KSB7XG4gICAgICB2YXIgaGVscGVycyA9IGhlbHBlcnNCeVJvb3RTbmFwc2hvdC5nZXQocm9vdCk7XG5cbiAgICAgIGlmIChoZWxwZXJzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgZmluZCBoZWxwZXJzIGZvciBhIHJvb3QuIFRoaXMgaXMgYSBidWcgaW4gUmVhY3QgUmVmcmVzaC4nKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFtb3VudGVkUm9vdHMuaGFzKHJvb3QpKSB7Ly8gTm8gbG9uZ2VyIG1vdW50ZWQuXG4gICAgICB9XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGhlbHBlcnMuc2NoZWR1bGVSZWZyZXNoKHJvb3QsIHVwZGF0ZSk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKCFkaWRFcnJvcikge1xuICAgICAgICAgIGRpZEVycm9yID0gdHJ1ZTtcbiAgICAgICAgICBmaXJzdEVycm9yID0gZXJyO1xuICAgICAgICB9IC8vIEtlZXAgdHJ5aW5nIG90aGVyIHJvb3RzLlxuXG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgIHRocm93IGZpcnN0RXJyb3I7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVwZGF0ZTtcbiAgfSBmaW5hbGx5IHtcbiAgICBpc1BlcmZvcm1pbmdSZWZyZXNoID0gZmFsc2U7XG4gIH1cbn1cbmZ1bmN0aW9uIHJlZ2lzdGVyKHR5cGUsIGlkKSB7XG4gIHtcbiAgICBpZiAodHlwZSA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIFRoaXMgY2FuIGhhcHBlbiBpbiBhbiBlZGdlIGNhc2UsIGUuZy4gaWYgd2UgcmVnaXN0ZXJcbiAgICAvLyByZXR1cm4gdmFsdWUgb2YgYSBIT0MgYnV0IGl0IHJldHVybnMgYSBjYWNoZWQgY29tcG9uZW50LlxuICAgIC8vIElnbm9yZSBhbnl0aGluZyBidXQgdGhlIGZpcnN0IHJlZ2lzdHJhdGlvbiBmb3IgZWFjaCB0eXBlLlxuXG5cbiAgICBpZiAoYWxsRmFtaWxpZXNCeVR5cGUuaGFzKHR5cGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfSAvLyBDcmVhdGUgZmFtaWx5IG9yIHJlbWVtYmVyIHRvIHVwZGF0ZSBpdC5cbiAgICAvLyBOb25lIG9mIHRoaXMgYm9va2tlZXBpbmcgYWZmZWN0cyByZWNvbmNpbGlhdGlvblxuICAgIC8vIHVudGlsIHRoZSBmaXJzdCBwZXJmb3JtUmVhY3RSZWZyZXNoKCkgY2FsbCBhYm92ZS5cblxuXG4gICAgdmFyIGZhbWlseSA9IGFsbEZhbWlsaWVzQnlJRC5nZXQoaWQpO1xuXG4gICAgaWYgKGZhbWlseSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBmYW1pbHkgPSB7XG4gICAgICAgIGN1cnJlbnQ6IHR5cGVcbiAgICAgIH07XG4gICAgICBhbGxGYW1pbGllc0J5SUQuc2V0KGlkLCBmYW1pbHkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZW5kaW5nVXBkYXRlcy5wdXNoKFtmYW1pbHksIHR5cGVdKTtcbiAgICB9XG5cbiAgICBhbGxGYW1pbGllc0J5VHlwZS5zZXQodHlwZSwgZmFtaWx5KTsgLy8gVmlzaXQgaW5uZXIgdHlwZXMgYmVjYXVzZSB3ZSBtaWdodCBub3QgaGF2ZSByZWdpc3RlcmVkIHRoZW0uXG5cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAoZ2V0UHJvcGVydHkodHlwZSwgJyQkdHlwZW9mJykpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgIHJlZ2lzdGVyKHR5cGUucmVuZGVyLCBpZCArICckcmVuZGVyJyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgcmVnaXN0ZXIodHlwZS50eXBlLCBpZCArICckdHlwZScpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gc2V0U2lnbmF0dXJlKHR5cGUsIGtleSkge1xuICB2YXIgZm9yY2VSZXNldCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gIHZhciBnZXRDdXN0b21Ib29rcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzID8gYXJndW1lbnRzWzNdIDogdW5kZWZpbmVkO1xuXG4gIHtcbiAgICBpZiAoIWFsbFNpZ25hdHVyZXNCeVR5cGUuaGFzKHR5cGUpKSB7XG4gICAgICBhbGxTaWduYXR1cmVzQnlUeXBlLnNldCh0eXBlLCB7XG4gICAgICAgIGZvcmNlUmVzZXQ6IGZvcmNlUmVzZXQsXG4gICAgICAgIG93bktleToga2V5LFxuICAgICAgICBmdWxsS2V5OiBudWxsLFxuICAgICAgICBnZXRDdXN0b21Ib29rczogZ2V0Q3VzdG9tSG9va3MgfHwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSAvLyBWaXNpdCBpbm5lciB0eXBlcyBiZWNhdXNlIHdlIG1pZ2h0IG5vdCBoYXZlIHNpZ25lZCB0aGVtLlxuXG5cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdvYmplY3QnICYmIHR5cGUgIT09IG51bGwpIHtcbiAgICAgIHN3aXRjaCAoZ2V0UHJvcGVydHkodHlwZSwgJyQkdHlwZW9mJykpIHtcbiAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgIHNldFNpZ25hdHVyZSh0eXBlLnJlbmRlciwga2V5LCBmb3JjZVJlc2V0LCBnZXRDdXN0b21Ib29rcyk7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSBSRUFDVF9NRU1PX1RZUEU6XG4gICAgICAgICAgc2V0U2lnbmF0dXJlKHR5cGUudHlwZSwga2V5LCBmb3JjZVJlc2V0LCBnZXRDdXN0b21Ib29rcyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59IC8vIFRoaXMgaXMgbGF6aWx5IGNhbGxlZCBkdXJpbmcgZmlyc3QgcmVuZGVyIGZvciBhIHR5cGUuXG4vLyBJdCBjYXB0dXJlcyBIb29rIGxpc3QgYXQgdGhhdCB0aW1lIHNvIGlubGluZSByZXF1aXJlcyBkb24ndCBicmVhayBjb21wYXJpc29ucy5cblxuZnVuY3Rpb24gY29sbGVjdEN1c3RvbUhvb2tzRm9yU2lnbmF0dXJlKHR5cGUpIHtcbiAge1xuICAgIHZhciBzaWduYXR1cmUgPSBhbGxTaWduYXR1cmVzQnlUeXBlLmdldCh0eXBlKTtcblxuICAgIGlmIChzaWduYXR1cmUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29tcHV0ZUZ1bGxLZXkoc2lnbmF0dXJlKTtcbiAgICB9XG4gIH1cbn1cbmZ1bmN0aW9uIGdldEZhbWlseUJ5SUQoaWQpIHtcbiAge1xuICAgIHJldHVybiBhbGxGYW1pbGllc0J5SUQuZ2V0KGlkKTtcbiAgfVxufVxuZnVuY3Rpb24gZ2V0RmFtaWx5QnlUeXBlKHR5cGUpIHtcbiAge1xuICAgIHJldHVybiBhbGxGYW1pbGllc0J5VHlwZS5nZXQodHlwZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZpbmRBZmZlY3RlZEhvc3RJbnN0YW5jZXMoZmFtaWxpZXMpIHtcbiAge1xuICAgIHZhciBhZmZlY3RlZEluc3RhbmNlcyA9IG5ldyBTZXQoKTtcbiAgICBtb3VudGVkUm9vdHMuZm9yRWFjaChmdW5jdGlvbiAocm9vdCkge1xuICAgICAgdmFyIGhlbHBlcnMgPSBoZWxwZXJzQnlSb290LmdldChyb290KTtcblxuICAgICAgaWYgKGhlbHBlcnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCBmaW5kIGhlbHBlcnMgZm9yIGEgcm9vdC4gVGhpcyBpcyBhIGJ1ZyBpbiBSZWFjdCBSZWZyZXNoLicpO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW5zdGFuY2VzRm9yUm9vdCA9IGhlbHBlcnMuZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoKHJvb3QsIGZhbWlsaWVzKTtcbiAgICAgIGluc3RhbmNlc0ZvclJvb3QuZm9yRWFjaChmdW5jdGlvbiAoaW5zdCkge1xuICAgICAgICBhZmZlY3RlZEluc3RhbmNlcy5hZGQoaW5zdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gYWZmZWN0ZWRJbnN0YW5jZXM7XG4gIH1cbn1cbmZ1bmN0aW9uIGluamVjdEludG9HbG9iYWxIb29rKGdsb2JhbE9iamVjdCkge1xuICB7XG4gICAgLy8gRm9yIFJlYWN0IE5hdGl2ZSwgdGhlIGdsb2JhbCBob29rIHdpbGwgYmUgc2V0IHVwIGJ5IHJlcXVpcmUoJ3JlYWN0LWRldnRvb2xzLWNvcmUnKS5cbiAgICAvLyBUaGF0IGNvZGUgd2lsbCBydW4gYmVmb3JlIHVzLiBTbyB3ZSBuZWVkIHRvIG1vbmtleXBhdGNoIGZ1bmN0aW9ucyBvbiBleGlzdGluZyBob29rLlxuICAgIC8vIEZvciBSZWFjdCBXZWIsIHRoZSBnbG9iYWwgaG9vayB3aWxsIGJlIHNldCB1cCBieSB0aGUgZXh0ZW5zaW9uLlxuICAgIC8vIFRoaXMgd2lsbCBhbHNvIHJ1biBiZWZvcmUgdXMuXG4gICAgdmFyIGhvb2sgPSBnbG9iYWxPYmplY3QuX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4gICAgaWYgKGhvb2sgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSG93ZXZlciwgaWYgdGhlcmUgaXMgbm8gRGV2VG9vbHMgZXh0ZW5zaW9uLCB3ZSdsbCBuZWVkIHRvIHNldCB1cCB0aGUgZ2xvYmFsIGhvb2sgb3Vyc2VsdmVzLlxuICAgICAgLy8gTm90ZSB0aGF0IGluIHRoaXMgY2FzZSBpdCdzIGltcG9ydGFudCB0aGF0IHJlbmRlcmVyIGNvZGUgcnVucyAqYWZ0ZXIqIHRoaXMgbWV0aG9kIGNhbGwuXG4gICAgICAvLyBPdGhlcndpc2UsIHRoZSByZW5kZXJlciB3aWxsIHRoaW5rIHRoYXQgdGhlcmUgaXMgbm8gZ2xvYmFsIGhvb2ssIGFuZCB3b24ndCBkbyB0aGUgaW5qZWN0aW9uLlxuICAgICAgdmFyIG5leHRJRCA9IDA7XG4gICAgICBnbG9iYWxPYmplY3QuX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID0gaG9vayA9IHtcbiAgICAgICAgcmVuZGVyZXJzOiBuZXcgTWFwKCksXG4gICAgICAgIHN1cHBvcnRzRmliZXI6IHRydWUsXG4gICAgICAgIGluamVjdDogZnVuY3Rpb24gKGluamVjdGVkKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHRJRCsrO1xuICAgICAgICB9LFxuICAgICAgICBvblNjaGVkdWxlRmliZXJSb290OiBmdW5jdGlvbiAoaWQsIHJvb3QsIGNoaWxkcmVuKSB7fSxcbiAgICAgICAgb25Db21taXRGaWJlclJvb3Q6IGZ1bmN0aW9uIChpZCwgcm9vdCwgbWF5YmVQcmlvcml0eUxldmVsLCBkaWRFcnJvcikge30sXG4gICAgICAgIG9uQ29tbWl0RmliZXJVbm1vdW50OiBmdW5jdGlvbiAoKSB7fVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaG9vay5pc0Rpc2FibGVkKSB7XG4gICAgICAvLyBUaGlzIGlzbid0IGEgcmVhbCBwcm9wZXJ0eSBvbiB0aGUgaG9vaywgYnV0IGl0IGNhbiBiZSBzZXQgdG8gb3B0IG91dFxuICAgICAgLy8gb2YgRGV2VG9vbHMgaW50ZWdyYXRpb24gYW5kIGFzc29jaWF0ZWQgd2FybmluZ3MgYW5kIGxvZ3MuXG4gICAgICAvLyBVc2luZyBjb25zb2xlWyd3YXJuJ10gdG8gZXZhZGUgQmFiZWwgYW5kIEVTTGludFxuICAgICAgY29uc29sZVsnd2FybiddKCdTb21ldGhpbmcgaGFzIHNoaW1tZWQgdGhlIFJlYWN0IERldlRvb2xzIGdsb2JhbCBob29rIChfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pLiAnICsgJ0Zhc3QgUmVmcmVzaCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIHRoaXMgc2hpbSBhbmQgd2lsbCBiZSBkaXNhYmxlZC4nKTtcbiAgICAgIHJldHVybjtcbiAgICB9IC8vIEhlcmUsIHdlIGp1c3Qgd2FudCB0byBnZXQgYSByZWZlcmVuY2UgdG8gc2NoZWR1bGVSZWZyZXNoLlxuXG5cbiAgICB2YXIgb2xkSW5qZWN0ID0gaG9vay5pbmplY3Q7XG5cbiAgICBob29rLmluamVjdCA9IGZ1bmN0aW9uIChpbmplY3RlZCkge1xuICAgICAgdmFyIGlkID0gb2xkSW5qZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmICh0eXBlb2YgaW5qZWN0ZWQuc2NoZWR1bGVSZWZyZXNoID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBpbmplY3RlZC5zZXRSZWZyZXNoSGFuZGxlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBUaGlzIHZlcnNpb24gc3VwcG9ydHMgUmVhY3QgUmVmcmVzaC5cbiAgICAgICAgaGVscGVyc0J5UmVuZGVyZXJJRC5zZXQoaWQsIGluamVjdGVkKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGlkO1xuICAgIH07IC8vIERvIHRoZSBzYW1lIGZvciBhbnkgYWxyZWFkeSBpbmplY3RlZCByb290cy5cbiAgICAvLyBUaGlzIGlzIHVzZWZ1bCBpZiBSZWFjdERPTSBoYXMgYWxyZWFkeSBiZWVuIGluaXRpYWxpemVkLlxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMTc2MjZcblxuXG4gICAgaG9vay5yZW5kZXJlcnMuZm9yRWFjaChmdW5jdGlvbiAoaW5qZWN0ZWQsIGlkKSB7XG4gICAgICBpZiAodHlwZW9mIGluamVjdGVkLnNjaGVkdWxlUmVmcmVzaCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgaW5qZWN0ZWQuc2V0UmVmcmVzaEhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gVGhpcyB2ZXJzaW9uIHN1cHBvcnRzIFJlYWN0IFJlZnJlc2guXG4gICAgICAgIGhlbHBlcnNCeVJlbmRlcmVySUQuc2V0KGlkLCBpbmplY3RlZCk7XG4gICAgICB9XG4gICAgfSk7IC8vIFdlIGFsc28gd2FudCB0byB0cmFjayBjdXJyZW50bHkgbW91bnRlZCByb290cy5cblxuICAgIHZhciBvbGRPbkNvbW1pdEZpYmVyUm9vdCA9IGhvb2sub25Db21taXRGaWJlclJvb3Q7XG5cbiAgICB2YXIgb2xkT25TY2hlZHVsZUZpYmVyUm9vdCA9IGhvb2sub25TY2hlZHVsZUZpYmVyUm9vdCB8fCBmdW5jdGlvbiAoKSB7fTtcblxuICAgIGhvb2sub25TY2hlZHVsZUZpYmVyUm9vdCA9IGZ1bmN0aW9uIChpZCwgcm9vdCwgY2hpbGRyZW4pIHtcbiAgICAgIGlmICghaXNQZXJmb3JtaW5nUmVmcmVzaCkge1xuICAgICAgICAvLyBJZiBpdCB3YXMgaW50ZW50aW9uYWxseSBzY2hlZHVsZWQsIGRvbid0IGF0dGVtcHQgdG8gcmVzdG9yZS5cbiAgICAgICAgLy8gVGhpcyBpbmNsdWRlcyBpbnRlbnRpb25hbGx5IHNjaGVkdWxlZCB1bm1vdW50cy5cbiAgICAgICAgZmFpbGVkUm9vdHMuZGVsZXRlKHJvb3QpO1xuXG4gICAgICAgIGlmIChyb290RWxlbWVudHMgIT09IG51bGwpIHtcbiAgICAgICAgICByb290RWxlbWVudHMuc2V0KHJvb3QsIGNoaWxkcmVuKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gb2xkT25TY2hlZHVsZUZpYmVyUm9vdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG5cbiAgICBob29rLm9uQ29tbWl0RmliZXJSb290ID0gZnVuY3Rpb24gKGlkLCByb290LCBtYXliZVByaW9yaXR5TGV2ZWwsIGRpZEVycm9yKSB7XG4gICAgICB2YXIgaGVscGVycyA9IGhlbHBlcnNCeVJlbmRlcmVySUQuZ2V0KGlkKTtcblxuICAgICAgaWYgKGhlbHBlcnMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBoZWxwZXJzQnlSb290LnNldChyb290LCBoZWxwZXJzKTtcbiAgICAgICAgdmFyIGN1cnJlbnQgPSByb290LmN1cnJlbnQ7XG4gICAgICAgIHZhciBhbHRlcm5hdGUgPSBjdXJyZW50LmFsdGVybmF0ZTsgLy8gV2UgbmVlZCB0byBkZXRlcm1pbmUgd2hldGhlciB0aGlzIHJvb3QgaGFzIGp1c3QgKHVuKW1vdW50ZWQuXG4gICAgICAgIC8vIFRoaXMgbG9naWMgaXMgY29weS1wYXN0ZWQgZnJvbSBzaW1pbGFyIGxvZ2ljIGluIHRoZSBEZXZUb29scyBiYWNrZW5kLlxuICAgICAgICAvLyBJZiB0aGlzIGJyZWFrcyB3aXRoIHNvbWUgcmVmYWN0b3JpbmcsIHlvdSdsbCB3YW50IHRvIHVwZGF0ZSBEZXZUb29scyB0b28uXG5cbiAgICAgICAgaWYgKGFsdGVybmF0ZSAhPT0gbnVsbCkge1xuICAgICAgICAgIHZhciB3YXNNb3VudGVkID0gYWx0ZXJuYXRlLm1lbW9pemVkU3RhdGUgIT0gbnVsbCAmJiBhbHRlcm5hdGUubWVtb2l6ZWRTdGF0ZS5lbGVtZW50ICE9IG51bGwgJiYgbW91bnRlZFJvb3RzLmhhcyhyb290KTtcbiAgICAgICAgICB2YXIgaXNNb3VudGVkID0gY3VycmVudC5tZW1vaXplZFN0YXRlICE9IG51bGwgJiYgY3VycmVudC5tZW1vaXplZFN0YXRlLmVsZW1lbnQgIT0gbnVsbDtcblxuICAgICAgICAgIGlmICghd2FzTW91bnRlZCAmJiBpc01vdW50ZWQpIHtcbiAgICAgICAgICAgIC8vIE1vdW50IGEgbmV3IHJvb3QuXG4gICAgICAgICAgICBtb3VudGVkUm9vdHMuYWRkKHJvb3QpO1xuICAgICAgICAgICAgZmFpbGVkUm9vdHMuZGVsZXRlKHJvb3QpO1xuICAgICAgICAgIH0gZWxzZSBpZiAod2FzTW91bnRlZCAmJiBpc01vdW50ZWQpIDsgZWxzZSBpZiAod2FzTW91bnRlZCAmJiAhaXNNb3VudGVkKSB7XG4gICAgICAgICAgICAvLyBVbm1vdW50IGFuIGV4aXN0aW5nIHJvb3QuXG4gICAgICAgICAgICBtb3VudGVkUm9vdHMuZGVsZXRlKHJvb3QpO1xuXG4gICAgICAgICAgICBpZiAoZGlkRXJyb3IpIHtcbiAgICAgICAgICAgICAgLy8gV2UnbGwgcmVtb3VudCBpdCBvbiBmdXR1cmUgZWRpdHMuXG4gICAgICAgICAgICAgIGZhaWxlZFJvb3RzLmFkZChyb290KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGhlbHBlcnNCeVJvb3QuZGVsZXRlKHJvb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSBpZiAoIXdhc01vdW50ZWQgJiYgIWlzTW91bnRlZCkge1xuICAgICAgICAgICAgaWYgKGRpZEVycm9yKSB7XG4gICAgICAgICAgICAgIC8vIFdlJ2xsIHJlbW91bnQgaXQgb24gZnV0dXJlIGVkaXRzLlxuICAgICAgICAgICAgICBmYWlsZWRSb290cy5hZGQocm9vdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE1vdW50IGEgbmV3IHJvb3QuXG4gICAgICAgICAgbW91bnRlZFJvb3RzLmFkZChyb290KTtcbiAgICAgICAgfVxuICAgICAgfSAvLyBBbHdheXMgY2FsbCB0aGUgZGVjb3JhdGVkIERldlRvb2xzIGhvb2suXG5cblxuICAgICAgcmV0dXJuIG9sZE9uQ29tbWl0RmliZXJSb290LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfVxufVxuZnVuY3Rpb24gaGFzVW5yZWNvdmVyYWJsZUVycm9ycygpIHtcbiAgLy8gVE9ETzogZGVsZXRlIHRoaXMgYWZ0ZXIgcmVtb3ZpbmcgZGVwZW5kZW5jeSBpbiBSTi5cbiAgcmV0dXJuIGZhbHNlO1xufSAvLyBFeHBvc2VkIGZvciB0ZXN0aW5nLlxuXG5mdW5jdGlvbiBfZ2V0TW91bnRlZFJvb3RDb3VudCgpIHtcbiAge1xuICAgIHJldHVybiBtb3VudGVkUm9vdHMuc2l6ZTtcbiAgfVxufSAvLyBUaGlzIGlzIGEgd3JhcHBlciBvdmVyIG1vcmUgcHJpbWl0aXZlIGZ1bmN0aW9ucyBmb3Igc2V0dGluZyBzaWduYXR1cmUuXG4vLyBTaWduYXR1cmVzIGxldCB1cyBkZWNpZGUgd2hldGhlciB0aGUgSG9vayBvcmRlciBoYXMgY2hhbmdlZCBvbiByZWZyZXNoLlxuLy9cbi8vIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgdG8gYmUgdXNlZCBhcyBhIHRyYW5zZm9ybSB0YXJnZXQsIGUuZy46XG4vLyB2YXIgX3MgPSBjcmVhdGVTaWduYXR1cmVGdW5jdGlvbkZvclRyYW5zZm9ybSgpXG4vL1xuLy8gZnVuY3Rpb24gSGVsbG8oKSB7XG4vLyAgIGNvbnN0IFtmb28sIHNldEZvb10gPSB1c2VTdGF0ZSgwKTtcbi8vICAgY29uc3QgdmFsdWUgPSB1c2VDdXN0b21Ib29rKCk7XG4vLyAgIF9zKCk7IC8qIENhbGwgd2l0aG91dCBhcmd1bWVudHMgdHJpZ2dlcnMgY29sbGVjdGluZyB0aGUgY3VzdG9tIEhvb2sgbGlzdC5cbi8vICAgICAgICAgICogVGhpcyBkb2Vzbid0IGhhcHBlbiBkdXJpbmcgdGhlIG1vZHVsZSBldmFsdWF0aW9uIGJlY2F1c2Ugd2Vcbi8vICAgICAgICAgICogZG9uJ3Qgd2FudCB0byBjaGFuZ2UgdGhlIG1vZHVsZSBvcmRlciB3aXRoIGlubGluZSByZXF1aXJlcy5cbi8vICAgICAgICAgICogTmV4dCBjYWxscyBhcmUgbm9vcHMuICovXG4vLyAgIHJldHVybiA8aDE+SGk8L2gxPjtcbi8vIH1cbi8vXG4vLyAvKiBDYWxsIHdpdGggYXJndW1lbnRzIGF0dGFjaGVzIHRoZSBzaWduYXR1cmUgdG8gdGhlIHR5cGU6ICovXG4vLyBfcyhcbi8vICAgSGVsbG8sXG4vLyAgICd1c2VTdGF0ZXtbZm9vLCBzZXRGb29dfSgwKScsXG4vLyAgICgpID0+IFt1c2VDdXN0b21Ib29rXSwgLyogTGF6eSB0byBhdm9pZCB0cmlnZ2VyaW5nIGlubGluZSByZXF1aXJlcyAqL1xuLy8gKTtcblxuZnVuY3Rpb24gY3JlYXRlU2lnbmF0dXJlRnVuY3Rpb25Gb3JUcmFuc2Zvcm0oKSB7XG4gIHtcbiAgICB2YXIgc2F2ZWRUeXBlO1xuICAgIHZhciBoYXNDdXN0b21Ib29rcztcbiAgICB2YXIgZGlkQ29sbGVjdEhvb2tzID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBrZXksIGZvcmNlUmVzZXQsIGdldEN1c3RvbUhvb2tzKSB7XG4gICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgLy8gV2UncmUgaW4gdGhlIGluaXRpYWwgcGhhc2UgdGhhdCBhc3NvY2lhdGVzIHNpZ25hdHVyZXNcbiAgICAgICAgLy8gd2l0aCB0aGUgZnVuY3Rpb25zLiBOb3RlIHRoaXMgbWF5IGJlIGNhbGxlZCBtdWx0aXBsZSB0aW1lc1xuICAgICAgICAvLyBpbiBIT0MgY2hhaW5zIGxpa2UgX3MoaG9jMShfcyhob2MyKF9zKGFjdHVhbEZ1bmN0aW9uKSkpKSkuXG4gICAgICAgIGlmICghc2F2ZWRUeXBlKSB7XG4gICAgICAgICAgLy8gV2UncmUgaW4gdGhlIGlubmVybW9zdCBjYWxsLCBzbyB0aGlzIGlzIHRoZSBhY3R1YWwgdHlwZS5cbiAgICAgICAgICBzYXZlZFR5cGUgPSB0eXBlO1xuICAgICAgICAgIGhhc0N1c3RvbUhvb2tzID0gdHlwZW9mIGdldEN1c3RvbUhvb2tzID09PSAnZnVuY3Rpb24nO1xuICAgICAgICB9IC8vIFNldCB0aGUgc2lnbmF0dXJlIGZvciBhbGwgdHlwZXMgKGV2ZW4gd3JhcHBlcnMhKSBpbiBjYXNlXG4gICAgICAgIC8vIHRoZXkgaGF2ZSBubyBzaWduYXR1cmVzIG9mIHRoZWlyIG93bi4gVGhpcyBpcyB0byBwcmV2ZW50XG4gICAgICAgIC8vIHByb2JsZW1zIGxpa2UgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yMDQxNy5cblxuXG4gICAgICAgIGlmICh0eXBlICE9IG51bGwgJiYgKHR5cGVvZiB0eXBlID09PSAnZnVuY3Rpb24nIHx8IHR5cGVvZiB0eXBlID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgICBzZXRTaWduYXR1cmUodHlwZSwga2V5LCBmb3JjZVJlc2V0LCBnZXRDdXN0b21Ib29rcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdHlwZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlJ3JlIGluIHRoZSBfcygpIGNhbGwgd2l0aG91dCBhcmd1bWVudHMsIHdoaWNoIG1lYW5zXG4gICAgICAgIC8vIHRoaXMgaXMgdGhlIHRpbWUgdG8gY29sbGVjdCBjdXN0b20gSG9vayBzaWduYXR1cmVzLlxuICAgICAgICAvLyBPbmx5IGRvIHRoaXMgb25jZS4gVGhpcyBwYXRoIGlzIGhvdCBhbmQgcnVucyAqaW5zaWRlKiBldmVyeSByZW5kZXIhXG4gICAgICAgIGlmICghZGlkQ29sbGVjdEhvb2tzICYmIGhhc0N1c3RvbUhvb2tzKSB7XG4gICAgICAgICAgZGlkQ29sbGVjdEhvb2tzID0gdHJ1ZTtcbiAgICAgICAgICBjb2xsZWN0Q3VzdG9tSG9va3NGb3JTaWduYXR1cmUoc2F2ZWRUeXBlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTGlrZWx5Q29tcG9uZW50VHlwZSh0eXBlKSB7XG4gIHtcbiAgICBzd2l0Y2ggKHR5cGVvZiB0eXBlKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHtcbiAgICAgICAgICAvLyBGaXJzdCwgZGVhbCB3aXRoIGNsYXNzZXMuXG4gICAgICAgICAgaWYgKHR5cGUucHJvdG90eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50KSB7XG4gICAgICAgICAgICAgIC8vIFJlYWN0IGNsYXNzLlxuICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIG93bk5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModHlwZS5wcm90b3R5cGUpO1xuXG4gICAgICAgICAgICBpZiAob3duTmFtZXMubGVuZ3RoID4gMSB8fCBvd25OYW1lc1swXSAhPT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgICAgICAgICAvLyBUaGlzIGxvb2tzIGxpa2UgYSBjbGFzcy5cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG9cblxuXG4gICAgICAgICAgICBpZiAodHlwZS5wcm90b3R5cGUuX19wcm90b19fICE9PSBPYmplY3QucHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgIC8vIEl0IGhhcyBhIHN1cGVyY2xhc3MuXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0gLy8gUGFzcyB0aHJvdWdoLlxuICAgICAgICAgICAgLy8gVGhpcyBsb29rcyBsaWtlIGEgcmVndWxhciBmdW5jdGlvbiB3aXRoIGVtcHR5IHByb3RvdHlwZS5cblxuICAgICAgICAgIH0gLy8gRm9yIHBsYWluIGZ1bmN0aW9ucyBhbmQgYXJyb3dzLCB1c2UgbmFtZSBhcyBhIGhldXJpc3RpYy5cblxuXG4gICAgICAgICAgdmFyIG5hbWUgPSB0eXBlLm5hbWUgfHwgdHlwZS5kaXNwbGF5TmFtZTtcbiAgICAgICAgICByZXR1cm4gdHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIC9eW0EtWl0vLnRlc3QobmFtZSk7XG4gICAgICAgIH1cblxuICAgICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgICAge1xuICAgICAgICAgIGlmICh0eXBlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoZ2V0UHJvcGVydHkodHlwZSwgJyQkdHlwZW9mJykpIHtcbiAgICAgICAgICAgICAgY2FzZSBSRUFDVF9GT1JXQVJEX1JFRl9UWVBFOlxuICAgICAgICAgICAgICBjYXNlIFJFQUNUX01FTU9fVFlQRTpcbiAgICAgICAgICAgICAgICAvLyBEZWZpbml0ZWx5IFJlYWN0IGNvbXBvbmVudHMuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0cy5fZ2V0TW91bnRlZFJvb3RDb3VudCA9IF9nZXRNb3VudGVkUm9vdENvdW50O1xuZXhwb3J0cy5jb2xsZWN0Q3VzdG9tSG9va3NGb3JTaWduYXR1cmUgPSBjb2xsZWN0Q3VzdG9tSG9va3NGb3JTaWduYXR1cmU7XG5leHBvcnRzLmNyZWF0ZVNpZ25hdHVyZUZ1bmN0aW9uRm9yVHJhbnNmb3JtID0gY3JlYXRlU2lnbmF0dXJlRnVuY3Rpb25Gb3JUcmFuc2Zvcm07XG5leHBvcnRzLmZpbmRBZmZlY3RlZEhvc3RJbnN0YW5jZXMgPSBmaW5kQWZmZWN0ZWRIb3N0SW5zdGFuY2VzO1xuZXhwb3J0cy5nZXRGYW1pbHlCeUlEID0gZ2V0RmFtaWx5QnlJRDtcbmV4cG9ydHMuZ2V0RmFtaWx5QnlUeXBlID0gZ2V0RmFtaWx5QnlUeXBlO1xuZXhwb3J0cy5oYXNVbnJlY292ZXJhYmxlRXJyb3JzID0gaGFzVW5yZWNvdmVyYWJsZUVycm9ycztcbmV4cG9ydHMuaW5qZWN0SW50b0dsb2JhbEhvb2sgPSBpbmplY3RJbnRvR2xvYmFsSG9vaztcbmV4cG9ydHMuaXNMaWtlbHlDb21wb25lbnRUeXBlID0gaXNMaWtlbHlDb21wb25lbnRUeXBlO1xuZXhwb3J0cy5wZXJmb3JtUmVhY3RSZWZyZXNoID0gcGVyZm9ybVJlYWN0UmVmcmVzaDtcbmV4cG9ydHMucmVnaXN0ZXIgPSByZWdpc3RlcjtcbmV4cG9ydHMuc2V0U2lnbmF0dXJlID0gc2V0U2lnbmF0dXJlO1xuICB9KSgpO1xufVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsIlJFQUNUX0ZPUldBUkRfUkVGX1RZUEUiLCJTeW1ib2wiLCJSRUFDVF9NRU1PX1RZUEUiLCJQb3NzaWJseVdlYWtNYXAiLCJXZWFrTWFwIiwiTWFwIiwiYWxsRmFtaWxpZXNCeUlEIiwiYWxsRmFtaWxpZXNCeVR5cGUiLCJhbGxTaWduYXR1cmVzQnlUeXBlIiwidXBkYXRlZEZhbWlsaWVzQnlUeXBlIiwicGVuZGluZ1VwZGF0ZXMiLCJoZWxwZXJzQnlSZW5kZXJlcklEIiwiaGVscGVyc0J5Um9vdCIsIm1vdW50ZWRSb290cyIsIlNldCIsImZhaWxlZFJvb3RzIiwicm9vdEVsZW1lbnRzIiwiaXNQZXJmb3JtaW5nUmVmcmVzaCIsImNvbXB1dGVGdWxsS2V5Iiwic2lnbmF0dXJlIiwiZnVsbEtleSIsIm93bktleSIsImhvb2tzIiwiZ2V0Q3VzdG9tSG9va3MiLCJlcnIiLCJmb3JjZVJlc2V0IiwiaSIsImxlbmd0aCIsImhvb2siLCJuZXN0ZWRIb29rU2lnbmF0dXJlIiwiZ2V0IiwidW5kZWZpbmVkIiwibmVzdGVkSG9va0tleSIsImhhdmVFcXVhbFNpZ25hdHVyZXMiLCJwcmV2VHlwZSIsIm5leHRUeXBlIiwicHJldlNpZ25hdHVyZSIsIm5leHRTaWduYXR1cmUiLCJpc1JlYWN0Q2xhc3MiLCJ0eXBlIiwicHJvdG90eXBlIiwiaXNSZWFjdENvbXBvbmVudCIsImNhblByZXNlcnZlU3RhdGVCZXR3ZWVuIiwicmVzb2x2ZUZhbWlseSIsImNsb25lTWFwIiwibWFwIiwiY2xvbmUiLCJmb3JFYWNoIiwidmFsdWUiLCJrZXkiLCJzZXQiLCJjbG9uZVNldCIsImFkZCIsImdldFByb3BlcnR5Iiwib2JqZWN0IiwicHJvcGVydHkiLCJwZXJmb3JtUmVhY3RSZWZyZXNoIiwic3RhbGVGYW1pbGllcyIsInVwZGF0ZWRGYW1pbGllcyIsInVwZGF0ZXMiLCJfcmVmIiwiZmFtaWx5IiwiY3VycmVudCIsInVwZGF0ZSIsImhlbHBlcnMiLCJzZXRSZWZyZXNoSGFuZGxlciIsImRpZEVycm9yIiwiZmlyc3RFcnJvciIsImZhaWxlZFJvb3RzU25hcHNob3QiLCJtb3VudGVkUm9vdHNTbmFwc2hvdCIsImhlbHBlcnNCeVJvb3RTbmFwc2hvdCIsInJvb3QiLCJFcnJvciIsImhhcyIsImVsZW1lbnQiLCJzY2hlZHVsZVJvb3QiLCJzY2hlZHVsZVJlZnJlc2giLCJyZWdpc3RlciIsImlkIiwicHVzaCIsInJlbmRlciIsInNldFNpZ25hdHVyZSIsImFyZ3VtZW50cyIsImNvbGxlY3RDdXN0b21Ib29rc0ZvclNpZ25hdHVyZSIsImdldEZhbWlseUJ5SUQiLCJnZXRGYW1pbHlCeVR5cGUiLCJmaW5kQWZmZWN0ZWRIb3N0SW5zdGFuY2VzIiwiZmFtaWxpZXMiLCJhZmZlY3RlZEluc3RhbmNlcyIsImluc3RhbmNlc0ZvclJvb3QiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJpbnN0IiwiaW5qZWN0SW50b0dsb2JhbEhvb2siLCJnbG9iYWxPYmplY3QiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJuZXh0SUQiLCJyZW5kZXJlcnMiLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0IiwiaW5qZWN0ZWQiLCJvblNjaGVkdWxlRmliZXJSb290IiwiY2hpbGRyZW4iLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm1heWJlUHJpb3JpdHlMZXZlbCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiaXNEaXNhYmxlZCIsImNvbnNvbGUiLCJvbGRJbmplY3QiLCJhcHBseSIsIm9sZE9uQ29tbWl0RmliZXJSb290Iiwib2xkT25TY2hlZHVsZUZpYmVyUm9vdCIsImFsdGVybmF0ZSIsIndhc01vdW50ZWQiLCJtZW1vaXplZFN0YXRlIiwiaXNNb3VudGVkIiwiaGFzVW5yZWNvdmVyYWJsZUVycm9ycyIsIl9nZXRNb3VudGVkUm9vdENvdW50Iiwic2l6ZSIsImNyZWF0ZVNpZ25hdHVyZUZ1bmN0aW9uRm9yVHJhbnNmb3JtIiwic2F2ZWRUeXBlIiwiaGFzQ3VzdG9tSG9va3MiLCJkaWRDb2xsZWN0SG9va3MiLCJpc0xpa2VseUNvbXBvbmVudFR5cGUiLCJvd25OYW1lcyIsIk9iamVjdCIsImdldE93blByb3BlcnR5TmFtZXMiLCJfX3Byb3RvX18iLCJuYW1lIiwiZGlzcGxheU5hbWUiLCJ0ZXN0IiwiZXhwb3J0cyJdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js\n"));

/***/ }),

/***/ "./node_modules/next/dist/compiled/react-refresh/runtime.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/react-refresh/runtime.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval(__webpack_require__.ts("\n\nif (false) {} else {\n  module.exports = __webpack_require__(/*! ./cjs/react-refresh-runtime.development.js */ \"./node_modules/next/dist/compiled/react-refresh/cjs/react-refresh-runtime.development.js\");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3JlYWN0LXJlZnJlc2gvcnVudGltZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYixJQUFJQSxLQUFxQyxFQUFFLEVBRTFDLE1BQU07RUFDTEcsa0xBQXNFO0FBQ3hFIiwic291cmNlcyI6WyJGOlxcVUFFIFBST0pFQ1RTXFxEVUJBSV9QUk9KRUNUXFwyN21hcmNoX2Jsb2dfbGlzdGluZ19zaXRlbWFwX2RvbmVcXDI0bWFyY2h2ZXJjZWxwdXNoZWRfd29ya2luZ19kb25lXFxub2RlX21vZHVsZXNcXG5leHRcXGRpc3RcXGNvbXBpbGVkXFxyZWFjdC1yZWZyZXNoXFxydW50aW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1yZWZyZXNoLXJ1bnRpbWUucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtcmVmcmVzaC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iXSwibmFtZXMiOlsicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/react-refresh/runtime.js\n"));

/***/ })

},
/******/ __webpack_require__ => { // webpackRuntimeModules
/******/ var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
/******/ var __webpack_exports__ = (__webpack_exec__("./node_modules/next/dist/compiled/@next/react-refresh-utils/dist/runtime.js"));
/******/ _N_E = __webpack_exports__;
/******/ }
]);